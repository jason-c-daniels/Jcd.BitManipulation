<?xml version="1.0"?>
<!-- @formatter:off -->
<!-- ReSharper disable IdentifierTypo -->
<doc>
   <examples>
      <item name="ByteExtensions">
         <example>
            <code>
               byte data = 0b00000000;

               // turn on all the bits
               data = data.SetBits(0, 8); // value is now 0b11111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the upper 4 bits.
               data = data.ClearBits(4, 4); // value is now 0b00001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b11110000

               // read the upper nybble as a byte
               var upperNybble = data.ReadBits(4, 4); // upperNybble is now 0b00001111

               // write 0b1011 into the upper nybble of data
               data = data.StoreBits(0b1011, 4, 4); // data is now 0b10110000

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 8) // value is now 0b11111111
                          .SetBits() // this is the equivalent as above
                          .ClearBits(4, 4) // value is now 0b00001111
                          .ToggleBits(); // value is now 0b11110000

               upperNybble = data.ReadBits(4, 4) // extract the upper nybble (0b00001111)
                                 .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111
            </code>
         </example>
      </item>
      <item name="SByteExtensions">
         <example>
            <code>
               sbyte data = 0b00000000;

               // turn on all the bits
               data = data.SetBits(0, 8); // value is now 0b11111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the upper 4 bits.
               data = data.ClearBits(4, 4); // value is now 0b00001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b11110000

               // read the upper nybble as a byte
               var upperNybble = data.ReadBits(4, 4); // upperNybble is now 0b00001111

               // write 0b1011 into the upper nybble of data
               data = data.StoreBits(0b1011, 4, 4); // data is now 0b10110000

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 8) // value is now 0b11111111
                          .SetBits() // this is the equivalent as above
                          .ClearBits(4, 4) // value is now 0b00001111
                          .ToggleBits(); // value is now 0b11110000

               upperNybble = data.ReadBits(4, 4) // extract the upper nybble (0b00001111)
                                 .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111
            </code>
         </example>
      </item>
      <item name="UInt16Extensions">
         <example>
            <code>
               ushort data = 0b0000000000000000;

               // turn on all the bits
               data = data.SetBits(0, 16); // value is now 0b1111111111111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now 0b1111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b0000111111110000

               var finalData = data;

               // read the upper byte
               var upperByte = (byte) data.ReadBits(8, 8); // upperByte is now 0b00001111

               // write 0b1011 into the upper nybble
               upperByte = upperByte.StoreBits(0b1011, 4, 4); // upperByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 16) // value is now 0b1111111111111111
                          .SetBits() // this is the equivalent as above
                          .ClearBits(4, 8) // value is now 0b1111000000001111
                          .ToggleBits(); // value is now 0b0000111111110000

               upperByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
                                       .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData 0b0000111111110000
               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big) // Upper byte is now 0b10111111
                                          .StoreByte(0b01010101, 0, Endian.Little); // lower byte is now 0b01010101

               // mutatedData is now 0b1011111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b10111111]

               var leBaToUInt16Le = leBa.ToUInt16(Endian.Little); // leBaToUInt16Le = 0b1011111101010101

               var leBaToUInt16Be = leBa.ToUInt16(Endian.Big); // leBaToUInt16Le = 0b0101010110111111
            </code>
         </example>
      </item>
      <item name="Int16Extensions">
         <example>
            <code>
               short data = 0b0000000000000000;

               // turn on all the bits
               data = data.SetBits(0, 16); // value is now 0b1111111111111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now 0b1111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b0000111111110000

               var finalData = data;

               // read the upper byte
               var upperByte = (byte) data.ReadBits(8, 8); // upperByte is now 0b00001111

               // write 0b1011 into the upper nybble
               upperByte = upperByte.StoreBits(0b1011, 4, 4); // upperByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 16) // value is now 0b1111111111111111
                          .SetBits() // this is the equivalent as above
                          .ClearBits(4, 8) // value is now 0b1111000000001111
                          .ToggleBits(); // value is now 0b0000111111110000

               upperByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
                                       .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData 0b0000111111110000
               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big) // Upper byte is now 0b10111111
                                          .StoreByte(0b01010101, 0, Endian.Little); // lower byte is now 0b01010101

               // mutatedData is now 0b1011111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b10111111]

               var leBaToInt16Le = (BitMask) leBa.ToInt16(Endian.Little); // leBaToInt16Le = 0b1011111101010101

               var leBaToInt16Be = (BitMask) leBa.ToInt16(Endian.Big); // leBaToInt16Le = 0b0101010110111111

            </code>
         </example>
      </item>
      <item name="UInt32Extensions">
         <example>
            <code>
               uint data = 0;

               // turn on all the bits
               data = data.SetBits(0, 32); // value is now 0b11111111111111111111111111111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now 0b11111111111111111111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b00000000000000000000111111110000

               var finalData = data;

               // read the second byte
               var secondByte = (byte) data.ReadBits(8, 8); // secondByte is now 0b00001111

               // write 0b1011 into the upper nybble
               secondByte = secondByte.StoreBits(0b1011, 4, 4); // secondByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 32) // value is now 0b11111111111111111111111111111111
                          .SetBits() // this is the equivalent as above
                          .ClearBits(4, 8) // value is now 01111111111111111b1111000000001111
                          .ToggleBits(); // value is now 0b00000000000000000000111111110000

               secondByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
                                        .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData is 0b00000000000000000000111111110000

               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big)
                                          .StoreByte(0b01010101, 0, Endian.Little) // lower byte is now 0b01010101
               ;
               // mutatedData is now 0b10111111000000000000111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b00000000, 0b00001111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b00001111,
                                                                  //       0b00000000, 0b10111111]

               var leBaToUInt32Le = leBa.ToUInt32(Endian.Little); // leBaToUInt32Le = 0b10111111000000000000111101010101

               var leBaToUInt32Be = leBa.ToUInt32(Endian.Big); // leBaToUInt32Be = 0b01010101000011110000000010111111

            </code>
         </example>
      </item>
      <item name="Int32Extensions">
         <example>
            <code>
               int data = 0;

               // turn on all the bits
               data = data.SetBits(0, 32); // value is now 0b11111111111111111111111111111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now 0b11111111111111111111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b00000000000000000000111111110000

               var finalData = data;

               // read the second byte
               var secondByte = (byte) data.ReadBits(8, 8); // secondByte is now 0b00001111

               // write 0b1011 into the upper nybble
               secondByte = secondByte.StoreBits(0b1011, 4, 4); // secondByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 32) // value is now 0b11111111111111111111111111111111
                          .SetBits() // this is the equivalent as above
                          .ClearBits(4, 8) // value is now 01111111111111111b1111000000001111
                          .ToggleBits(); // value is now 0b00000000000000000000111111110000

               secondByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
                                        .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData is 0b00000000000000000000111111110000

               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big)
                                          .StoreByte(0b01010101, 0, Endian.Little) // lower byte is now 0b01010101
               ;
               // mutatedData is now 0b10111111000000000000111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b00000000, 0b00001111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b00001111,
                                                                  //       0b00000000, 0b10111111]

               var leBaToInt32Le = leBa.ToInt32(Endian.Little); // leBaToInt32Le = 0b10111111000000000000111101010101

               var leBaToInt32Be = leBa.ToInt32(Endian.Big); // leBaToInt32Be = 0b01010101000011110000000010111111

            </code>
         </example>
      </item>
      <item name="UInt64Extensions">
         <example>
            <code>
               ulong data = 0;

               // turn on all the bits
               data = data.SetBits(0, 64); // value is now
               // 0b1111111111111111111111111111111111111111111111111111111111111111
               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now
               // 0b1111111111111111111111111111111111111111111111111111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now
               // 0b0000000000000000000000000000000000000000000000000000111111110000

               var finalData = data;

               // read the second byte
               var secondByte = (byte) data.ReadBits(8, 8); // secondByte is now 0b00001111

               // write 0b1011 into the upper nybble
               secondByte = secondByte.StoreBits(0b1011, 4, 4); // secondByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 64) // value is now 0b1111111111111111111111111111111111111111111111111111111111111111
                          .SetBits() // this is the equivalent as above
                          .ClearBits(4, 8) // value is now 0b1111111111111111111111111111111111111111111111111111000000001111
                          .ToggleBits(); // value is now 0b0000000000000000000000000000000000000000000000000000111111110000

               secondByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
                                        .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now
               // secondByte is now 0b10111111

               // finalData is 0b0000000000000000000000000000000000000000000000000000111111110000
               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big)
                                          .StoreByte(0b01010101, 0, Endian.Little)
               ;
               // mutatedData is now 0b1011111100000000000000000000000000000000000000000000111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b00000000, 0b00000000, 0b00000000,
                                                               //       0b00000000, 0b00000000, 0b00001111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b00001111, 0b00000000, 0b00000000, 
                                                                  //       0b00000000, 0b00000000, 0b00000000, 0b10111111]

               var leBaToUInt64Le = leBa.ToUInt64(Endian.Little); // leBaToUInt64Le = 0b1011111100000000000000000000000000000000000000000000111101010101

               var leBaToUInt64Be = leBa.ToUInt64(Endian.Big); // leBaToUInt64Be = 0b0101010100001111000000000000000000000000000000000000000010111111

            </code>
         </example>
      </item>
      <item name="Int64Extensions">
         <example>
            <code>
               long data = 0;

               // turn on all the bits
               data = data.SetBits(0, 64); // value is now
               // 0b1111111111111111111111111111111111111111111111111111111111111111
               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now 0b1111111111111111111111111111111111111111111111111111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b0000000000000000000000000000000000000000000000000000111111110000

               var finalData = data;

               // read the second byte
               var secondByte = (byte) data.ReadBits(8, 8); // secondByte is now 0b00001111

               // write 0b1011 into the upper nybble
               secondByte = secondByte.StoreBits(0b1011, 4, 4); // secondByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 64) // value is now 0b1111111111111111111111111111111111111111111111111111111111111111
                          .SetBits() // this is the equivalent as above
                          .ClearBits(4, 8) // value is now 0b1111111111111111111111111111111111111111111111111111000000001111
                          .ToggleBits(); // value is now 0b0000000000000000000000000000000000000000000000000000111111110000

               secondByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
                                        .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData is 0b0000000000000000000000000000000000000000000000000000111111110000
               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big)
                                          .StoreByte(0b01010101, 0, Endian.Little)
               ;
               // mutatedData is now 0b1011111100000000000000000000000000000000000000000000111101010101
               
               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b00000000, 0b00000000, 0b00000000,
                                                               //       0b00000000, 0b00000000, 0b00001111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b00001111, 0b00000000, 0b00000000,
                                                                  //       0b00000000, 0b00000000, 0b00000000, 0b10111111]

               var leBaToInt64Le = leBa.ToInt64(Endian.Little); // leBaToInt64Le = 0b1011111100000000000000000000000000000000000000000000111101010101

               var leBaToInt64Be = leBa.ToInt64(Endian.Big); // leBaToInt64Be = 0b0101010100001111000000000000000000000000000000000000000010111111
            </code>
         </example>
      </item>
      <item name="ByteIndexerExample">
         <example>
            <code>
               // ByteIndexers on 64 bit values
               BigEndianByteIndexer bebi = 0xDECAFFC0FFEEC0DE;
               LittleEndianByteIndexer lebi = 0xDECAFFC0FFEEC0DE;

               Console.WriteLine(bebi.ToString()); // outputs: "DE CA FF C0 FF EE C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "DE C0 EE FF C0 FF CA DE"

               var bebib1 = bebi[1]; // bebib1 = 0xCA
               var lebib1 = lebi[1]; // lebib1 = 0xC0

               bebi[0] = 0x0A;
               lebi[0] = 0x0B;

               Console.WriteLine(bebi.ToString()); // outputs: "0A CA FF C0 FF EE C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "0B C0 EE FF C0 FF CA DE"

               // ByteIndexers on 32 bit values
               bebi = 0x600DC0DE;
               lebi = 0x600DC0DE;

               Console.WriteLine(bebi.ToString()); // outputs: "60 0D C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "DE C0 0D 60"

               bebib1 = bebi[1]; // bebib1 = 0x0D
               lebib1 = lebi[1]; // lebib1 = 0xC0

               bebi[0] = 0x0A;
               lebi[0] = 0x0B;

               Console.WriteLine(bebi.ToString()); // outputs: "0A 0D C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "0B C0 0D 60"
            </code>
         </example>
      </item>
   </examples>
</doc>
<!-- @formatter:on -->