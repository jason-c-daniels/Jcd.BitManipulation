<?xml version="1.0"?>
<doc>
   <assembly>
      <name>Jcd.BitManipulation</name>
   </assembly>
   <members>
      <member name="T:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions">
         <summary>
            Provides bit counting and other niche bit manipulation facilities
            for
            <see cref="T:System.Byte"/>
            instances.
         </summary>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.IsPowerOfTwo(System.Byte)">
         <summary>
            Determines if the number is a power of two.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>true if number == 2^n; where n is an integer.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.CountBitsSet(System.Byte)">
         <summary>
            Counts the bits that are set to 1 in a number.
         </summary>
         <param name="number">The number</param>
         <returns>The count of the bits set to 1</returns>
         <remarks>This is a reader-friendly alias for
            <see cref="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.PopCount(System.Byte)"/>
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.AreOnlyFirstAndLastBitsSet(System.Byte)">
         <summary>
            Determines if the only lowest bit and one other higher bit are set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>true if the bitwise representation follows this pattern: 0b10..01. with any number of intervening
            zeros.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.GetValueOrNextHigherPowerOfTwo(System.Byte)">
         <summary>
            For any given number return the number if it's a power of two,
            or return the next higher power of two capable of fitting in the
            data type.
         </summary>
         <param name="number">the number to evaluate</param>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.GetHighestBitSet(System.Byte)">
         <summary>
            Calculate the index of the highest bit that's been set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The index of the highest bit that's been set; or -1 if none were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.GetLowestBitSet(System.Byte)">
         <summary>
            Calculate the index of the lowest bit that's been set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The index of the lowest bit that's been set; or -1 if none were set.</returns>
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.CountLeadingZeros(System.Byte)">
         <summary>
            Computes the number of sequentially zeroed bits occupying the
            most significant bit positions.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The count of sequentially zeroed bits occupying the most significant bit positions.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.CountTrailingZeros(System.Byte)">
         <summary>
            Computes the number of sequentially zeroed bits occupying the
            least significant bit positions.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The count of sequentially zeroed bits occupying the least significant bit positions.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.RotateLeft(System.Byte,System.Int32)">
         <summary>
            Performs a bitwise left rotation on a number.
         </summary>
         <param name="number">The number to rotate</param>
         <param name="count">the number of bits to rotate</param>
         <returns>The rotated value.</returns>
         <example>
            Examples
            <code>
               byte b = 0b00001111;
               var b2 = b.RotateLeft(3); // b2 = 0b01111000
               var b3 = b.RotateLeft(4); // b3 = 0b11110000
               var b4 = b.RotateLeft(5); // b4 = 0b11100001
               var b5 = b.RotateLeft(6); // b5 = 0b11000011
               var b6 = b.RotateLeft(7); // b6 = 0b10000111
               var b7 = b.RotateLeft(8); // b7 = 0b00001111
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.RotateRight(System.Byte,System.Int32)">
         <summary>
            Performs a bitwise right rotation on a number.
         </summary>
         <param name="number">The number to rotate</param>
         <param name="count">the number of bits to rotate</param>
         <returns>The rotated value.</returns>
         <example>
            Examples
            <code>
               byte b = 0b11110000;
               var b2 = b.RotateRight(3); // b2 = 0b00011110
               var b3 = b.RotateRight(4); // b3 = 0b00001111
               var b4 = b.RotateRight(5); // b4 = 0b10000111
               var b5 = b.RotateRight(6); // b5 = 0b11000011
               var b6 = b.RotateRight(7); // b6 = 0b11100001
               var b7 = b.RotateRight(8); // b7 = 0b11110000
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.ByteAlgorithmsExtensions.PopCount(System.Byte)">
         <summary>
            Counts the bits that are set to 1 in a number
         </summary>
         <param name="number">The number</param>
         <returns>The count of the bits set to 1</returns>
      </member>
      <member name="T:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions">
         <summary>
            Provides bit counting and other niche bit manipulation facilities
            for
            <see cref="T:System.UInt16"/>
            instances.
         </summary>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.IsPowerOfTwo(System.UInt16)">
         <summary>
            Determines if the number is a power of two.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>true if number == 2^n; where n is an integer.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.CountBitsSet(System.UInt16)">
         <summary>
            Counts the bits that are set to 1 in a number.
         </summary>
         <param name="number">The number</param>
         <returns>The count of the bits set to 1</returns>
         <remarks>This is a reader-friendly alias for
            <see cref="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.PopCount(System.UInt16)"/>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.AreOnlyFirstAndLastBitsSet(System.UInt16)">
         <summary>
            Determines if the only lowest bit and one other higher bit are set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>true if the bitwise representation follows this pattern: 0b10..01. with any number of intervening
            zeros.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.GetValueOrNextHigherPowerOfTwo(System.UInt16)">
         <summary>
            For any given number return the number if it's a power of two,
            or return the next higher power of two capable of fitting in the
            data type.
         </summary>
         <param name="number">the number to evaluate</param>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.GetHighestBitSet(System.UInt16)">
         <summary>
            Calculate the index of the highest bit that's been set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The index of the highest bit that's been set; or -1 if none were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.GetLowestBitSet(System.UInt16)">
         <summary>
            Calculate the index of the lowest bit that's been set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The index of the lowest bit that's been set; or -1 if none were set.</returns>
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.CountLeadingZeros(System.UInt16)">
         <summary>
            Computes the number of sequentially zeroed bits occupying the
            most significant bit positions.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The count of sequentially zeroed bits occupying the most significant bit positions.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.CountTrailingZeros(System.UInt16)">
         <summary>
            Computes the number of sequentially zeroed bits occupying the
            least significant bit positions.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The count of sequentially zeroed bits occupying the least significant bit positions.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.RotateLeft(System.UInt16,System.Int32)">
         <summary>
            Performs a bitwise left rotation on a number.
         </summary>
         <param name="number">The number to rotate</param>
         <param name="count">the number of bits to rotate</param>
         <returns>The rotated value.</returns>
         <example>
            Examples
            <code>
               ushort b = 0b00001111;
               var b2 = b.RotateLeft(3); // b2 = 0b01111000
               var b3 = b.RotateLeft(4); // b3 = 0b11110000
               var b4 = b.RotateLeft(5); // b4 = 0b11100001
               var b5 = b.RotateLeft(6); // b5 = 0b11000011
               var b6 = b.RotateLeft(7); // b6 = 0b10000111
               var b7 = b.RotateLeft(8); // b7 = 0b00001111
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.RotateRight(System.UInt16,System.Int32)">
         <summary>
            Performs a bitwise right rotation on a number.
         </summary>
         <param name="number">The number to rotate</param>
         <param name="count">the number of bits to rotate</param>
         <returns>The rotated value.</returns>
         <example>
            Examples
            <code>
               ushort b = 0b11110000;
               var b2 = b.RotateRight(3); // b2 = 0b00011110
               var b3 = b.RotateRight(4); // b3 = 0b00001111
               var b4 = b.RotateRight(5); // b4 = 0b10000111
               var b5 = b.RotateRight(6); // b5 = 0b11000011
               var b6 = b.RotateRight(7); // b6 = 0b11100001
               var b7 = b.RotateRight(8); // b7 = 0b11110000
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt16AlgorithmsExtensions.PopCount(System.UInt16)">
         <summary>
            Counts the bits that are set to 1 in a number
         </summary>
         <param name="number">The number</param>
         <returns>The count of the bits set to 1</returns>
      </member>
      <member name="T:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions">
         <summary>
            Provides bit counting and other niche bit manipulation facilities
            for
            <see cref="T:System.UInt32"/>
            instances.
         </summary>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.IsPowerOfTwo(System.UInt32)">
         <summary>
            Determines if the number is a power of two.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>true if number == 2^n; where n is an integer.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.CountBitsSet(System.UInt32)">
         <summary>
            Counts the bits that are set to 1 in a number.
         </summary>
         <param name="number">The number</param>
         <returns>The count of the bits set to 1</returns>
         <remarks>This is a reader-friendly alias for
            <see cref="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.PopCount(System.UInt32)"/>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.AreOnlyFirstAndLastBitsSet(System.UInt32)">
         <summary>
            Determines if the only lowest bit and one other higher bit are set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>true if the bitwise representation follows this pattern: 0b10..01. with any number of intervening
            zeros.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.GetValueOrNextHigherPowerOfTwo(System.UInt32)">
         <summary>
            For any given number return the number if it's a power of two,
            or return the next higher power of two capable of fitting in the
            data type.
         </summary>
         <param name="number">the number to evaluate</param>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.GetHighestBitSet(System.UInt32)">
         <summary>
            Calculate the index of the highest bit that's been set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The index of the highest bit that's been set; or -1 if none were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.GetLowestBitSet(System.UInt32)">
         <summary>
            Calculate the index of the lowest bit that's been set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The index of the lowest bit that's been set; or -1 if none were set.</returns>
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.CountLeadingZeros(System.UInt32)">
         <summary>
            Computes the number of sequentially zeroed bits occupying the
            most significant bit positions.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The count of sequentially zeroed bits occupying the most significant bit positions.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.CountTrailingZeros(System.UInt32)">
         <summary>
            Computes the number of sequentially zeroed bits occupying the
            least significant bit positions.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The count of sequentially zeroed bits occupying the least significant bit positions.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.RotateLeft(System.UInt32,System.Int32)">
         <summary>
            Performs a bitwise left rotation on a number.
         </summary>
         <param name="number">The number to rotate</param>
         <param name="count">the number of bits to rotate</param>
         <returns>The rotated value.</returns>
         <example>
            Examples
            <code>
               uint b = 0b00001111;
               var b2 = b.RotateLeft(3); // b2 = 0b01111000
               var b3 = b.RotateLeft(4); // b3 = 0b11110000
               var b4 = b.RotateLeft(5); // b4 = 0b11100001
               var b5 = b.RotateLeft(6); // b5 = 0b11000011
               var b6 = b.RotateLeft(7); // b6 = 0b10000111
               var b7 = b.RotateLeft(8); // b7 = 0b00001111
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.RotateRight(System.UInt32,System.Int32)">
         <summary>
            Performs a bitwise right rotation on a number.
         </summary>
         <param name="number">The number to rotate</param>
         <param name="count">the number of bits to rotate</param>
         <returns>The rotated value.</returns>
         <example>
            Examples
            <code>
               uint b = 0b11110000;
               var b2 = b.RotateRight(3); // b2 = 0b00011110
               var b3 = b.RotateRight(4); // b3 = 0b00001111
               var b4 = b.RotateRight(5); // b4 = 0b10000111
               var b5 = b.RotateRight(6); // b5 = 0b11000011
               var b6 = b.RotateRight(7); // b6 = 0b11100001
               var b7 = b.RotateRight(8); // b7 = 0b11110000
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt32AlgorithmsExtensions.PopCount(System.UInt32)">
         <summary>
            Counts the bits that are set to 1 in a number
         </summary>
         <param name="number">The number</param>
         <returns>The count of the bits set to 1</returns>
      </member>
      <member name="T:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions">
         <summary>
            Provides bit counting and other niche bit manipulation facilities
            for
            <see cref="T:System.UInt64"/>
            instances.
         </summary>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.IsPowerOfTwo(System.UInt64)">
         <summary>
            Determines if the number is a power of two.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>true if number == 2^n; where n is an integer.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.CountBitsSet(System.UInt64)">
         <summary>
            Counts the bits that are set to 1 in a number.
         </summary>
         <param name="number">The number</param>
         <returns>The count of the bits set to 1</returns>
         <remarks>This is a reader-friendly alias for
            <see cref="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.PopCount(System.UInt64)"/>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.AreOnlyFirstAndLastBitsSet(System.UInt64)">
         <summary>
            Determines if the only lowest bit and one other higher bit are set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>true if the bitwise representation follows this pattern: 0b10..01. with any number of intervening
            zeros.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.GetValueOrNextHigherPowerOfTwo(System.UInt64)">
         <summary>
            For any given number return the number if it's a power of two,
            or return the next higher power of two capable of fitting in the
            data type.
         </summary>
         <param name="number">the number to evaluate</param>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.GetHighestBitSet(System.UInt64)">
         <summary>
            Calculate the index of the highest bit that's been set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The index of the highest bit that's been set; or -1 if none were set.</returns>
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.GetLowestBitSet(System.UInt64)">
         <summary>
            Calculate the index of the lowest bit that's been set.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The index of the lowest bit that's been set; or -1 if none were set.</returns>
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.CountLeadingZeros(System.UInt64)">
         <summary>
            Computes the number of sequentially zeroed bits occupying the
            most significant bit positions.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The count of sequentially zeroed bits occupying the most significant bit positions.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.CountTrailingZeros(System.UInt64)">
         <summary>
            Computes the number of sequentially zeroed bits occupying the
            least significant bit positions.
         </summary>
         <param name="number">the number to evaluate</param>
         <returns>The count of sequentially zeroed bits occupying the least significant bit positions.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.RotateLeft(System.UInt64,System.Int32)">
         <summary>
            Performs a bitwise left rotation on a number.
         </summary>
         <param name="number">The number to rotate</param>
         <param name="count">the number of bits to rotate</param>
         <returns>The rotated value.</returns>
         <example>
            Examples
            <code>
               ulong b = 0b00001111;
               var b2 = b.RotateLeft(3); // b2 = 0b01111000
               var b3 = b.RotateLeft(4); // b3 = 0b11110000
               var b4 = b.RotateLeft(5); // b4 = 0b11100001
               var b5 = b.RotateLeft(6); // b5 = 0b11000011
               var b6 = b.RotateLeft(7); // b6 = 0b10000111
               var b7 = b.RotateLeft(8); // b7 = 0b00001111
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.RotateRight(System.UInt64,System.Int32)">
         <summary>
            Performs a bitwise right rotation on a number.
         </summary>
         <param name="number">The number to rotate</param>
         <param name="count">the number of bits to rotate</param>
         <returns>The rotated value.</returns>
         <example>
            Examples
            <code>
               ulong b = 0b11110000;
               var b2 = b.RotateRight(3); // b2 = 0b00011110
               var b3 = b.RotateRight(4); // b3 = 0b00001111
               var b4 = b.RotateRight(5); // b4 = 0b10000111
               var b5 = b.RotateRight(6); // b5 = 0b11000011
               var b6 = b.RotateRight(7); // b6 = 0b11100001
               var b7 = b.RotateRight(8); // b7 = 0b11110000
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.Algorithms.UInt64AlgorithmsExtensions.PopCount(System.UInt64)">
         <summary>
            Counts the bits that are set to 1 in a number
         </summary>
         <param name="number">The number</param>
         <returns>The count of the bits set to 1</returns>
      </member>
      <member name="T:Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Provides byte level indexing operations (set, get) on the bytes of
            a copied value. It provides indexer-style access to the bytes of
            the value. Index zero is the most significant byte.
         </summary>
         <example>
            <code>
               // ByteIndexers on 64 bit values
               BigEndianByteIndexer bebi = 0xDECAFFC0FFEEC0DE;
               LittleEndianByteIndexer lebi = 0xDECAFFC0FFEEC0DE;

               Console.WriteLine(bebi.ToString()); // outputs: "DE CA FF C0 FF EE C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "DE C0 EE FF C0 FF CA DE"

               var bebib1 = bebi[1]; // bebib1 = 0xCA
               var lebib1 = lebi[1]; // lebib1 = 0xC0

               bebi[0] = 0x0A;
               lebi[0] = 0x0B;

               Console.WriteLine(bebi.ToString()); // outputs: "0A CA FF C0 FF EE C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "0B C0 EE FF C0 FF CA DE"

               // ByteIndexers on 32 bit values
               bebi = 0x600DC0DE;
               lebi = 0x600DC0DE;

               Console.WriteLine(bebi.ToString()); // outputs: "60 0D C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "DE C0 0D 60"

               bebib1 = bebi[1]; // bebib1 = 0x0D
               lebib1 = lebi[1]; // lebib1 = 0xC0

               bebi[0] = 0x0A;
               lebi[0] = 0x0B;

               Console.WriteLine(bebi.ToString()); // outputs: "0A 0D C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "0B C0 0D 60"
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.UInt64)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Int64)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.Int64"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.UInt32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.UInt32"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Int32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.Int32"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.UInt16)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.UInt16"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Int16)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.Int16"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Byte)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.Byte"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.SByte)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.SByte"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Single)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.Single"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Double)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.Double"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.UInt64,System.Int32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <param name="byteSize">The number of bytes to index</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.ReadOnlySpan{System.Byte})">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a
            <see cref="T:System.ReadOnlySpan`1"/>
            of bytes.
         </summary>
         <param name="data">The span to populate the underlying data from.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.ReadOnlySpan{System.Byte},System.Int32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a
            <see cref="T:System.ReadOnlySpan`1"/>
            of bytes.
         </summary>
         <param name="data">The span to populate the underlying data from.</param>
         <param name="byteSize">The number of bytes to store from the
            <see cref="T:System.ReadOnlySpan`1"/>
         </param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Byte[])">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a
            <see cref="T:System.Array"/>
            of bytes.
         </summary>
         <param name="data">The span to populate the underlying data from.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Byte[],System.Int32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            from a
            <see cref="T:System.Array"/>
            of bytes.
         </summary>
         <param name="data">The span to populate the underlying data from.</param>
         <param name="byteSize">The number of bytes to store from the
            <see cref="T:System.Array"/>
         </param>
         <exclude/>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Explicit(Jcd.BitManipulation.LittleEndianByteIndexer)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Explicitly converts a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="indexer">The
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to copy the data from.
         </param>
         <returns>A new
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member name="P:Jcd.BitManipulation.BigEndianByteIndexer.Length">
         <summary>
            The number of indexable bytes.
         </summary>
      </member>
      <member name="F:Jcd.BitManipulation.BigEndianByteIndexer.data">
         <summary>
            The backing store.
         </summary>
         <exclude/>
      </member>
      <member name="P:Jcd.BitManipulation.BigEndianByteIndexer.Item(System.Int32)">
         <summary>
            Access bytes from the underlying data.
         </summary>
         <param name="index">The index of the byte to get or set.</param>
         <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or &gt;= Length</exception>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.Slice(System.Int32,System.Int32)">
         <summary>
            Get a subset of bytes given a starting offset and length.
         </summary>
         <param name="start">The starting bit offset</param>
         <param name="length">The number of bytes to extract</param>
         <returns>An array of bytes for the specified subset.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.UInt64">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data as a<see cref="T:System.UInt64"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Int64">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.Int64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.UInt32">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.UInt32"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Int32">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.Int32"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.UInt16">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.UInt16"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Int16">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.Int16"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Byte">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.Byte"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.SByte">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.SByte"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Single">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.Single"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Double">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:System.Double"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Explicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Byte[]">
         <summary>
            Explicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a array of bytes.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data converted to an array, serialized as big endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Explicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.ReadOnlySpan{System.Byte}">
         <summary>
            Explicitly converts the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a
            <see cref="T:System.ReadOnlySpan`1"/>
            of bytes.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data converted to an array, serialized as big endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.UInt64)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.UInt64"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial data for the indexer.</param>
         <returns>The newly created<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </returns>
         <example>
            <code>
               ulong number = 0xDEADBEEFFA17C0DE;
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0 = indexer[0]; // b0 is 0xDE
               indexer[1] = 0xFF;
               var result = indexer.ToString(); // result is "DE FF BE EF FA 17 C0 DE"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Int64)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Int64"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The newly created<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </returns>
         <example>
            <code>
               long number = 0x7EADBEEFFA17C0DE;
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0 = indexer[0]; // b0 is 0x7E
               indexer[1] = 0xFF;
               var result = indexer.ToString(); // result is "7E FF BE EF FA 17 C0 DE"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.UInt32)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.UInt32"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The newly created<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </returns>
         <example>
            <code>
               uint number = 0xDEADBEEF;
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0 = indexer[0]; // b0 is 0xDE
               indexer[1] = 0xFF;
               var result = indexer.ToString(); // result is "DE FF BE EF"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Int32)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Int32"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
         <example>
            <code>
               int number = 0x7EADBEEF;
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0 = indexer[0]; // b0 is 0xDE
               indexer[1] = 0xFF;
               var result = indexer.ToString(); // result is "7E FF BE EF"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.UInt16)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.UInt16"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
         <example>
            <code>
               ushort number = 0xDEAD;
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0 = indexer[0]; // b0 is 0xDE
               indexer[1] = 0xFF;
               var result = indexer.ToString(); // result is "DE FF"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Int16)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Int16"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
         <example>
            <code>
               short number = 0x7EAD;
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0 = indexer[0]; // b0 is 0xDE
               indexer[1] = 0xFF;
               var result = indexer.ToString(); // result is "7E FF"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Byte)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Byte"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
         <example>
            <code>
               byte number = 0xDE;
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0 = indexer[0]; // b0 is 0xDE
               indexer[0] = 0xFF;
               var result = indexer.ToString(); // result is "FF"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.SByte)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.SByte"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
         <example>
            <code>
               sbyte number = 0xDE;
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0 = indexer[0]; // b0 is 0xDE
               indexer[0] = 0xFF;
               var result = indexer.ToString(); // result is "FF"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Single)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Single"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
         <example>
            <code>
               float number = -6.259853398707798016E18f; // 0xDEADBEEF
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0 = indexer[0]; // b0 is 0xDE
               indexer[1] = 0xFF;
               var result = indexer.ToString(); // result is "DE FF BE EF"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Double)~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Double"/>
            to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
         <example>
            <code>
               var number = -1.1885959909993540014504278736E148; // 0xDEADBEEFFA17C0DE
               BigEndianByteIndexer indexer = number; // implicit cast.

               var b0_1 = indexer[0]; // b0 is 0xDE
               indexer[1] = 0xFF;
               var result = indexer.ToString(); // result is "DE FF BE EF FA 17 C0 DE"
            </code>
         </example>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Explicit(System.Byte[])~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Explicitly converts an array of bytes to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Explicit(System.ReadOnlySpan{System.Byte})~Jcd.BitManipulation.BigEndianByteIndexer">
         <summary>
            Explicitly converts an array of bytes to a<see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.StoreBytes(System.Byte[],System.Int32,System.Int32)">
         <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
         </summary>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.BigEndianByteIndexer.StoreBytes(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
         <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
         </summary>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.ToString">
         <summary>
            Formats the
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            as a hexadecimal string in big endian notation.
            For example: `60 0D C0 DE`
         </summary>
         <returns>a string of the data formatted as hex bytes</returns>
      </member>
      <member name="T:Jcd.BitManipulation.BitIndexer">
         <summary>
            Provides indexer style access to the bits on a copied value.
         </summary>
         <example>
            <para>
               Examples:
               <code>
                  ushort ui16 = 0b1011110001010101;
                  BitIndexer bi = ui16;
                  Console.WriteLine(bi.ToString()); // outputs: 0b1011110001010101

                  if (bi[0])
                  Console.WriteLine("Index 0 is set/true!"); // this will write to the output.

                  if (bi[1])
                  Console.WriteLine("Index 1 is set/true!"); // this will not write to the output.

                  if (bi[10])
                  Console.WriteLine("Index 10 is set/true!");

                  bi[1] = true; // bi is now 0b1011110001010111
                  if (bi[1])
                  Console.WriteLine("Index 1 is set/true!"); // this will write to the output.

                  Console.WriteLine(bi.ToString()); // outputs: 0b1011110001010111

                  var flags = bi[0..^0]; // flags = [true, true, true, false, true, false, true, false, false, false,
                  true, true, true, true, false, true];
                  Array.Reverse(flags);
                  var ui16Reversed=flags.ToUInt16(); // ui16Reversed = 0b1110101000111101;
                  BitIndexer biReversed = ui16Reversed;

                  Console.WriteLine(biReversed.ToString()); // outputs: 0b1110101000111101
               </code>
            </para>
         </example>
      </member>
      <member name="P:Jcd.BitManipulation.BitIndexer.Length">
         <summary>
            The number of bits indexable by this
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
            instance.
         </summary>
      </member>
      <member name="F:Jcd.BitManipulation.BitIndexer.bits">
         <summary>
            The backing store
         </summary>
         <exclude/>
      </member>
      <member name="P:Jcd.BitManipulation.BitIndexer.Item(System.Int32)">
         <summary>
            Gets or sets individual bits within the backing store.
         </summary>
         <param name="index">the offset of the bit to access.</param>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.Slice(System.Int32,System.Int32)">
         <summary>
            Gets a subset of bits given a starting offset and length.
         </summary>
         <param name="start">The starting bit offset</param>
         <param name="length">The number of bits to extract</param>
         <returns>a array of bools for the subset of bits</returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Double)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.UInt64"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Double">
         <summary>
            Automatically convert from a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
            to a
            <see cref="T:System.UInt64"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The bits converted to a
            <see cref="T:System.UInt64"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Single)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.UInt64"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Single">
         <summary>
            Automatically convert from a BitIndexer to a
            <see cref="T:System.UInt64"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The bits converted to a
            <see cref="T:System.UInt64"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.UInt64)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.UInt64"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.UInt64">
         <summary>
            Automatically convert from a BitIndexer to a
            <see cref="T:System.UInt64"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The bits converted to a
            <see cref="T:System.UInt64"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Int64)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.Int64"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Int64">
         <summary>
            Automatically convert from a BitIndexer to a
            <see cref="T:System.Int64"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The bits converted to a
            <see cref="T:System.Int64"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.UInt32)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.UInt32"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.UInt32">
         <summary>
            Automatically convert from a BitIndexer to a
            <see cref="T:System.UInt32"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The lower 32 bits converted to a<see cref="T:System.UInt32"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Int32)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.Int32"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Int32">
         <summary>
            Automatically convert from a BitIndexer to a
            <see cref="T:System.Int32"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The lower 32 bits converted to a<see cref="T:System.Int32"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.UInt16)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.UInt16"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.UInt16">
         <summary>
            Automatically convert from a BitIndexer to a
            <see cref="T:System.UInt16"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The lower 16 bits converted to a<see cref="T:System.UInt16"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Int16)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.Int16"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Int16">
         <summary>
            Automatically convert from a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
            to a
            <see cref="T:System.Int16"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The lower 16 bits converted to a<see cref="T:System.Int16"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.SByte)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.SByte"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.SByte">
         <summary>
            Automatically convert from a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
            to a
            <see cref="T:System.SByte"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The lower 8 bits converted to a<see cref="T:System.SByte"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Byte)~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically Convert from a
            <see cref="T:System.Byte"/>
            to a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
         </summary>
         <param name="bits">The initial value for the indexed bits.</param>
         <returns>A new<see cref="T:Jcd.BitManipulation.BitIndexer"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Byte">
         <summary>
            Automatically convert from a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
            to a
            <see cref="T:System.Byte"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>The lower 8 bits converted to a<see cref="T:System.Byte"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Boolean[]">
         <summary>
            Automatically convert from a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
            to a array of
            <see cref="T:System.Boolean"/>
         </summary>
         <param name="indexer">The indexer to convert from.</param>
         <returns>An array of bools for each bit with The Least Significant Bit is at index 0.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Boolean[])~Jcd.BitManipulation.BitIndexer">
         <summary>
            Automatically convert from a
            <see cref="T:Jcd.BitManipulation.BitIndexer"/>
            to a array of
            <see cref="T:System.Boolean"/>
         </summary>
         <param name="array">The indexer to convert from.</param>
         <returns>The lower 8 bits converted to a<see cref="T:System.Byte"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitIndexer.ToString">
         <summary>
            Format as a bit representation
         </summary>
         <returns>the bits of the value formatted as 0b0101...1111</returns>
      </member>
      <member name="T:Jcd.BitManipulation.BitMask">
         <summary>
            Provides an integer size independent representation of a bit mask
            and helper methods to simplify creating bit masks.
         </summary>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.AllBits">
         <summary>
            A bitmask with all bits set in the mask.
         </summary>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.Byte">
         <summary>
            A bitmask for the first byte in a number.
         </summary>
         <exclude/>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.Byte1">
         <summary>
            A bitmask for the second byte in a number.
         </summary>
         <exclude/>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.Byte2">
         <summary>
            A bitmask for the third byte in a number.
         </summary>
         <exclude/>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.Byte3">
         <summary>
            A bitmask for the fourth byte in a number.
         </summary>
         <exclude/>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.Byte4">
         <summary>
            A bitmask for the fifth byte in a number.
         </summary>
         <exclude/>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.Byte5">
         <summary>
            A bitmask for the sixth byte in a number.
         </summary>
         <exclude/>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.Byte6">
         <summary>
            A bitmask for the seventh byte in a number.
         </summary>
         <exclude/>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.Byte7">
         <summary>
            A bitmask for the seventh byte in a number.
         </summary>
         <exclude/>
      </member>
      <member name="F:Jcd.BitManipulation.BitMask.bits">
         <summary>
            The backing store for the actual bits of the<see cref="T:Jcd.BitManipulation.BitMask"/>.
         </summary>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.FromRange(System.Int32,System.Int32)">
         <summary>
            Create a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            with a range of bits set.
         </summary>
         <param name="offset">the lowest bit to start turning on</param>
         <param name="size">the number of bits to set to 1</param>
         <returns>the shifted mask</returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.FromSingleBit(System.Int32)">
         <summary>
            Create a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            with a single bit set.
         </summary>
         <param name="offset">the bit to set</param>
         <returns>a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            with the specified bit set.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.#ctor(Jcd.BitManipulation.BitMask)">
         <summary>
            Copies a existing
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </summary>
         <param name="mask">The
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            to copy
         </param>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt64)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.UInt64"/>
         </summary>
         <param name="bits">The bits to use for the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </param>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int64)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.Int64"/>
         </summary>
         <param name="bits">The bits to use for the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </param>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.UInt32"/>
         </summary>
         <param name="bits">The bits to use for the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </param>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.Int32"/>
         </summary>
         <param name="bits">The bits to use for the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </param>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt16)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.UInt16"/>
         </summary>
         <param name="bits">The bits to use for the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </param>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int16)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.Int16"/>
         </summary>
         <param name="bits">The bits to use for the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </param>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Byte)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.Byte"/>
         </summary>
         <param name="bits">The bits to use for the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </param>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.SByte)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.SByte"/>
         </summary>
         <param name="bits">The bits to use for the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </param>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.ToString">
         <summary>
            Formats the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            as a "0b" prefixed string of zeroes and ones.
         </summary>
         <returns>the bits of the mask formatted as 0b0101...1111</returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.SByte">
         <summary>
            Automatically convert to a
            <see cref="T:System.SByte"/>
            from a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </summary>
         <param name="mask">the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            to convert from.
         </param>
         <returns>the lowest 8 bits of the mask as a
            <see cref="T:System.SByte"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Byte">
         <summary>
            Automatically convert to a
            <see cref="T:System.Byte"/>
            from a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </summary>
         <param name="mask">the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            to convert from.
         </param>
         <returns>the lowest 8 bits of the mask as a
            <see cref="T:System.Byte"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int16">
         <summary>
            Automatically convert to a
            <see cref="T:System.Int16"/>
            from a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </summary>
         <param name="mask">the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            to convert from.
         </param>
         <returns>the lowest 16 bits of the mask as a
            <see cref="T:System.Int16"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt16">
         <summary>
            Automatically convert to
            <see cref="T:System.UInt16"/>
            from a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </summary>
         <param name="mask">the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            to convert from.
         </param>
         <returns>the lowest 16 bits of the mask as a
            <see cref="T:System.UInt16"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int32">
         <summary>
            Automatically convert to
            <see cref="T:System.Int32"/>
            from a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </summary>
         <param name="mask">the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            to convert from.
         </param>
         <returns>the lowest 32 bits of the mask as a int</returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt32">
         <summary>
            Automatically convert to
            <see cref="T:System.UInt32"/>
            from a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </summary>
         <param name="mask"></param>
         <returns>the lowest 32 bits of the mask as a uint</returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int64">
         <summary>
            Automatically convert to
            <see cref="T:System.Int64"/>
            from a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </summary>
         <param name="mask">the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            to convert from.
         </param>
         <returns>the bits of the mask as a
            <see cref="T:System.Int64"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt64">
         <summary>
            Automatically convert to
            <see cref="T:System.UInt64"/>
            from a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
         </summary>
         <param name="mask">the
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            to convert from.
         </param>
         <returns>the bits of the mask as a
            <see cref="T:System.UInt64"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.SByte)~Jcd.BitManipulation.BitMask">
         <summary>
            Automatically convert to
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.SByte"/>
         </summary>
         <param name="bits">The value to convert to a<see cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            constructed from the provided bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int16)~Jcd.BitManipulation.BitMask">
         <summary>
            Automatically convert to
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.Byte"/>
         </summary>
         <param name="bits">the value to convert to a BitMask</param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            constructed from the provided bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int32)~Jcd.BitManipulation.BitMask">
         <summary>
            Automatically convert to
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.Int32"/>
         </summary>
         <param name="bits">The value to convert to a<see cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            constructed from the provided bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int64)~Jcd.BitManipulation.BitMask">
         <summary>
            Automatically convert to
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.Int64"/>
         </summary>
         <param name="bits">The value to convert to a<see cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            constructed from the provided bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Byte)~Jcd.BitManipulation.BitMask">
         <summary>
            Automatically convert to
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.Byte"/>
         </summary>
         <param name="bits">The value to convert to a<see cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            constructed from the provided bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt16)~Jcd.BitManipulation.BitMask">
         <summary>
            Automatically convert to
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.UInt16"/>
         </summary>
         <param name="bits">The value to convert to a<see cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            constructed from the provided bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt32)~Jcd.BitManipulation.BitMask">
         <summary>
            Automatically convert to
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.UInt32"/>
         </summary>
         <param name="bits">The value to convert to a<see cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            constructed from the provided bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt64)~Jcd.BitManipulation.BitMask">
         <summary>
            Automatically convert to
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a
            <see cref="T:System.UInt64"/>
         </summary>
         <param name="bits">The value to convert to a<see cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <returns>The
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            constructed from the provided bits
         </returns>
      </member>
      <member name="T:Jcd.BitManipulation.BooleanArrayExtensions">
         <summary>
            Provides facilities to convert to numbers from arrays of
            <see cref="T:System.Boolean"/>
            values.
            At their respective bit positions,
            <see langword="true"/>
            is translated to 1
            and
            <see langword="false"/>
            is translated to 0.
         </summary>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToByte(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.Byte"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted
            <see cref="T:System.Byte"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToSByte(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.SByte"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted
            <see cref="T:System.SByte"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt16(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.UInt16"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted
            <see cref="T:System.UInt16"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt16(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.Int16"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted
            <see cref="T:System.Int16"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt32(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.UInt32"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted
            <see cref="T:System.UInt32"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt32(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.Int32"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted
            <see cref="T:System.Int32"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt64(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.UInt64"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted
            <see cref="T:System.UInt64"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt64(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.Int64"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted
            <see cref="T:System.Int64"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToDouble(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.Double"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted double</returns>
      </member>
      <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToSingle(System.Boolean[])">
         <summary>
            Converts an array of bools into a<see cref="T:System.Single"/>, discarding any excess bits.
         </summary>
         <param name="bits">The array of
            <see cref="T:System.Boolean"/>
            values to convert. The Least Significant Bit is at index 0
         </param>
         <returns>The converted float</returns>
      </member>
      <member name="T:Jcd.BitManipulation.ByteAlignment">
         <summary>
            Indicates how to align partially filled data when converting from collections of bytes.
         </summary>
         <remarks>
            This only applies when trying to convert a collection of bytes to a numeric type that's
            larger in bytes than the length of the collection. If the source collection is larger,
            the excess bytes are discarded.
         </remarks>
         <example>
            Convert a 3 byte array to a UInt32
            <code>
               using Jcd.BitManipulation;

               byte[] array = [0x0A, 0x0F, 0xEE];

               var val = array.ToUInt32(); // this is the same as: var ui1 = array.ToUInt32(Endian.Little,
               ByteAlignment.InferredFromEndian);
               Console.WriteLine($"0x{val:X08}"); // outputs: 0x00EE0F0A

               val = array.ToUInt32(align:ByteAlignment.MostSignificantByte); // this is the same as: var ui1 =
               array.ToUInt32(Endian.Little, ByteAlignment.MostSignificantByte);
               Console.WriteLine($"0x{val:X08}"); // outputs: 0xEE0F0A00

               val = array.ToUInt32(Endian.Big); // this is the same as: var ui1 = array.ToUInt32(Endian.Big,
               ByteAlignment.InferredFromEndian);
               Console.WriteLine($"0x{val:X08}"); // outputs: 0x0A0FEE00

               val = array.ToUInt32(Endian.Big, ByteAlignment.LeastSignificantByte);
               Console.WriteLine($"0x{val:X08}"); // outputs: 0x000A0FEE

            </code>
         </example>
      </member>
      <member name="F:Jcd.BitManipulation.ByteAlignment.InferredFromEndian">
         <summary>
            Indicates that little endian data is to be aligned to LSB and big endian data is to be aligned at MSB
         </summary>
      </member>
      <member name="F:Jcd.BitManipulation.ByteAlignment.LeastSignificantByte">
         <summary>
            Align the decoded value to the least significant byte
         </summary>
      </member>
      <member name="F:Jcd.BitManipulation.ByteAlignment.MostSignificantByte">
         <summary>
            Align the decoded value to the most significant byte
         </summary>
      </member>
      <member name="T:Jcd.BitManipulation.ByteArrayExtensions">
         <summary>
            Provides facilities to convert an array of bytes to other data types.
         </summary>
      </member>
      <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByte(System.Byte[],Jcd.BitManipulation.Endian)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.Byte"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <returns>The converted
            <see cref="T:System.Byte"/>
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToSByte(System.Byte[],Jcd.BitManipulation.Endian)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.SByte"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <returns>The converted sbyte</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt16(System.Byte[],Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.UInt16"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.UInt16"/>
         </returns>
         <remarks>
            <para>
               <b>WARNING:</b>
            </para>
            <para>
               Index 0 in the array is index 0 in the destination value. For Big Endian this is the
               most significant byte. If you're passing in a smaller array and need the result
               right shifted, you'll need to shift it after calling this.
            </para>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt16(System.Byte[],Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.Int16"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.Int16"/>
         </returns>
         <remarks>
            <para>
               <b>WARNING:</b>
            </para>
            <para>
               Index 0 in the array is index 0 in the destination value. For Big Endian this is the
               most significant byte. If you're passing in a smaller array and need the result
               right shifted, you'll need to shift it after calling this.
            </para>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt32(System.Byte[],Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.UInt32"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.UInt32"/>
         </returns>
         <remarks>
            <para>
               <b>WARNING:</b>
            </para>
            <para>
               Index 0 in the array is index 0 in the destination value. For Big Endian this is the
               most significant byte. If you're passing in a smaller array and need the result
               right shifted, you'll need to shift it after calling this.
            </para>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt32(System.Byte[],Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.UInt32"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.UInt32"/>
         </returns>
         <remarks>
            <para>
               <b>WARNING:</b>
            </para>
            <para>
               Index 0 in the array is index 0 in the destination value. For Big Endian this is the
               most significant byte. If you're passing in a smaller array and need the result
               right shifted, you'll need to shift it after calling this.
            </para>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt64(System.Byte[],Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.UInt64"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.UInt64"/>
         </returns>
         <remarks>
            <para>
               <b>WARNING:</b>
            </para>
            <para>
               Index 0 in the array is index 0 in the destination value. For Big Endian this is the
               most significant byte. If you're passing in a smaller array and need the result
               right shifted, you'll need to shift it after calling this.
            </para>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt64(System.Byte[],Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.Int64"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.Int64"/>
         </returns>
         <remarks>
            <para>
               <b>WARNING:</b>
            </para>
            <para>
               Index 0 in the array is index 0 in the destination value. For Big Endian this is the
               most significant byte. If you're passing in a smaller array and need the result
               right shifted, you'll need to shift it after calling this.
            </para>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteArrayExtensions.ToDouble(System.Byte[],Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.Double"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
         </param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.Double"/>
         </returns>
         <remarks>
            <para>
               <b>WARNING:</b>
            </para>
            <para>
               Index 0 in the array is index 0 in the destination value. For Big Endian this is the
               most significant byte. If you're passing in a smaller array and need the result
               right shifted, after calling this, you'll need to convert to a
               <see cref="T:System.UInt64"/>
               shift it, then convert back to a<see cref="T:System.Double"/>.
            </para>
         </remarks>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteArrayExtensions.ToSingle(System.Byte[],Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts an array of bytes into a<see cref="T:System.Single"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
         </param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted ulong</returns>
         <remarks>
            <para>
               <b>WARNING:</b>
            </para>
            <para>
               Index 0 in the array is index 0 in the destination value. For Big Endian this is the
               most significant byte. If you're passing in a smaller array and need the result
               right shifted, after calling this, you'll need to convert to a
               <see cref="T:System.UInt32"/>
               shift it, then convert back to a<see cref="T:System.Single"/>.
            </para>
         </remarks>
      </member>
      <member name="T:Jcd.BitManipulation.ByteExtensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.Byte"/>
         </summary>
         <example>
            <code>
               byte data = 0b00000000;

               // turn on all the bits
               data = data.SetBits(0, 8); // value is now 0b11111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the upper 4 bits.
               data = data.ClearBits(4, 4); // value is now 0b00001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b11110000

               // read the upper nybble as a byte
               var upperNybble = data.ReadBits(4, 4); // upperNybble is now 0b00001111

               // write 0b1011 into the upper nybble of data
               data = data.StoreBits(0b1011, 4, 4); // data is now 0b10110000

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 8) // value is now 0b11111111
               .SetBits() // this is the equivalent as above
               .ClearBits(4, 4) // value is now 0b00001111
               .ToggleBits(); // value is now 0b11110000

               upperNybble = data.ReadBits(4, 4) // extract the upper nybble (0b00001111)
               .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.AreAllBitsSet(System.Byte,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.Byte"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.AreAnyBitsSet(System.Byte,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.Byte"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.AreNoBitsSet(System.Byte,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.Byte"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ToBooleanArray(System.Byte)">
         <summary>
            Converts a
            <see cref="T:System.Byte"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0.
         </summary>
         <param name="bits">The value to convert to an array of
            <see cref="T:System.Boolean"/>
            values.
         </param>
         <returns>An array with the Least Significant Bit at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ToByteArray(System.Byte)">
         <summary>
            Converts a
            <see cref="T:System.Byte"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">the
            <see cref="T:System.Byte"/>
            to convert.
         </param>
         <returns>an array containing the<see cref="T:System.Byte"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ClearBits(System.Byte,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ClearBit(System.Byte,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/zero.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ClearBits(System.Byte,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ReadBits(System.Byte,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ReadBits(System.Byte,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The unshifted extracted bits</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteExtensions.ReadBits(System.Byte,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Reads the bits specified by a mask and right shifts it .
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The number of bits to right shift the result of applying the<see
            cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ReadBit(System.Byte,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.SetBits(System.Byte,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.SetBit(System.Byte,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.SetBits(System.Byte,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.StoreBits(System.Byte,System.Byte,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ByteExtensions.StoreBits(System.Byte,System.Byte,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.StoreBit(System.Byte,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ToggleBits(System.Byte,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ToggleBit(System.Byte,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.ByteExtensions.ToggleBits(System.Byte,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="T:Jcd.BitManipulation.DoubleExtensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.Double"/>
         </summary>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.AreAllBitsSet(System.Double,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.Double"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.AreAnyBitsSet(System.Double,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.Double"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.AreNoBitsSet(System.Double,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.Double"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.BitwiseToUInt64(System.Double)">
         <summary>
            Converts a
            <see cref="T:System.Double"/>
            to the bit-wise identical
            <see cref="T:System.UInt64"/>
         </summary>
         <param name="value">The value to convert.</param>
         <returns>the
            <see cref="T:System.UInt64"/>
            representation of the underlying bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.BitwiseToInt64(System.Double)">
         <summary>
            Converts a
            <see cref="T:System.Double"/>
            to the bit-wise identical
            <see cref="T:System.Int64"/>
         </summary>
         <param name="value">The value to convert.</param>
         <returns>the
            <see cref="T:System.Int64"/>
            representation of the underlying bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ToBooleanArray(System.Double)">
         <summary>
            Converts a
            <see cref="T:System.Double"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0..
         </summary>
         <param name="bits">The value to convert to an array of
            <see cref="T:System.Boolean"/>
            values.
         </param>
         <returns>the array. LSB at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ToByteArray(System.Double,Jcd.BitManipulation.Endian)">
         <summary>
            Converts a
            <see cref="T:System.Double"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">The value to convert to a
            <see cref="T:System.Byte"/>
            array.
         </param>
         <param name="endian">The order in which to store the bytes</param>
         <returns>The value as an array in the requested byte order</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ClearBits(System.Double,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ClearBit(System.Double,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/0.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ClearBits(System.Double,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ReadBits(System.Double,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ReadBits(System.Double,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.DoubleExtensions.ReadBits(System.Double,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The number of bits to right shift the result of applying the<see
            cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ReadBit(System.Double,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.DoubleExtensions.ReadBytes(System.Double,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a set of bytes starting at the specified byte location within the value.
         </summary>
         <param name="value">The value to read the bytes from.</param>
         <param name="offset">The byte offset to starting reading from.</param>
         <param name="size">The requested number of bytes to read.</param>
         <param name="endian">The endianness of the indexing for the byte read.</param>
         <returns>A byte array of the value in the specified endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.DoubleExtensions.ReadByte(System.Double,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a single byte from the value at the specified byte offset.
         </summary>
         <param name="value">The value to read the byte from.</param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The specified byte.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.SetBits(System.Double,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.SetBit(System.Double,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.SetBits(System.Double,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.DoubleExtensions.StoreBits(System.Double,System.UInt64,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.DoubleExtensions.StoreBits(System.Double,System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.StoreBit(System.Double,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.DoubleExtensions.StoreBytes(System.Double,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.DoubleExtensions.StoreBytes(System.Double,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.DoubleExtensions.StoreByte(System.Double,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a single byte to the value at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="byte">The
            <see cref="T:System.Byte"/>
            value to store.
         </param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ToggleBits(System.Double,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ToggleBit(System.Double,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.DoubleExtensions.ToggleBits(System.Double,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="T:Jcd.BitManipulation.Endian">
         <summary>
            The order of the bytes in memory.
         </summary>
      </member>
      <member name="F:Jcd.BitManipulation.Endian.Little">
         <summary>
            Indicates that the least significant byte is at index 0.
         </summary>
      </member>
      <member name="F:Jcd.BitManipulation.Endian.Big">
         <summary>
            Indicates that the most significant byte is at index 0.
         </summary>
      </member>
      <member name="T:Jcd.BitManipulation.Int16Extensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.Int16"/>
         </summary>
         <example>
            <code>
               short data = 0b0000000000000000;

               // turn on all the bits
               data = data.SetBits(0, 16); // value is now 0b1111111111111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now 0b1111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b0000111111110000

               var finalData = data;

               // read the upper byte
               var upperByte = (byte) data.ReadBits(8, 8); // upperByte is now 0b00001111

               // write 0b1011 into the upper nybble
               upperByte = upperByte.StoreBits(0b1011, 4, 4); // upperByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 16) // value is now 0b1111111111111111
               .SetBits() // this is the equivalent as above
               .ClearBits(4, 8) // value is now 0b1111000000001111
               .ToggleBits(); // value is now 0b0000111111110000

               upperByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
               .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData 0b0000111111110000
               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big) // Upper byte is now 0b10111111
               .StoreByte(0b01010101, 0, Endian.Little); // lower byte is now 0b01010101

               // mutatedData is now 0b1011111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b10111111]

               var leBaToInt16Le = (BitMask) leBa.ToInt16(Endian.Little); // leBaToInt16Le = 0b1011111101010101

               var leBaToInt16Be = (BitMask) leBa.ToInt16(Endian.Big); // leBaToInt16Le = 0b0101010110111111

            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.AreAllBitsSet(System.Int16,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.Int16"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.AreAnyBitsSet(System.Int16,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.Int16"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.AreNoBitsSet(System.Int16,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.Int16"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ToBooleanArray(System.Int16)">
         <summary>
            Converts a
            <see cref="T:System.Int16"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0.
         </summary>
         <param name="bits">The
            <see cref="T:System.Int16"/>
            to convert.
         </param>
         <returns>An array with the Least Significant Bit at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ToByteArray(System.Int16,Jcd.BitManipulation.Endian)">
         <summary>
            Converts a
            <see cref="T:System.Int16"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">The value to convert to a
            <see cref="T:System.Byte"/>
            array.
         </param>
         <param name="endian">The order in which to store the bytes</param>
         <returns>The value as an array in the requested byte order</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ClearBits(System.Int16,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ClearBit(System.Int16,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/0.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ClearBits(System.Int16,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ReadBits(System.Int16,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ReadBits(System.Int16,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The unshifted extracted bits</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int16Extensions.ReadBits(System.Int16,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The number of bits to right shift the result of applying the<see
            cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ReadBit(System.Int16,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int16Extensions.ReadBytes(System.Int16,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a set of bytes starting at the specified offset within the value.
         </summary>
         <param name="value">The value to read the bytes from.</param>
         <param name="offset">The byte offset to starting reading from.</param>
         <param name="size">The requested number of bytes to read.</param>
         <param name="endian">The endianness of the indexing for the byte read.</param>
         <returns>A byte array of the value in the specified endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int16Extensions.ReadByte(System.Int16,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a single byte from the value at the specified byte offset.
         </summary>
         <param name="value">The value to read the byte from.</param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The specified byte.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.SetBits(System.Int16,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.SetBit(System.Int16,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.SetBits(System.Int16,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int16Extensions.StoreBits(System.Int16,System.Int16,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int16Extensions.StoreBits(System.Int16,System.Int16,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.StoreBit(System.Int16,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int16Extensions.StoreBytes(System.Int16,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int16Extensions.StoreBytes(System.Int16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int16Extensions.StoreByte(System.Int16,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a single byte to the value at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="byte">The
            <see cref="T:System.Byte"/>
            value to store.
         </param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness for indexing into the bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ToggleBits(System.Int16,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ToggleBit(System.Int16,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int16Extensions.ToggleBits(System.Int16,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="T:Jcd.BitManipulation.Int32Extensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.Int32"/>
         </summary>
         <example>
            <code>
               int data = 0;

               // turn on all the bits
               data = data.SetBits(0, 32); // value is now 0b11111111111111111111111111111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now 0b11111111111111111111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b00000000000000000000111111110000

               var finalData = data;

               // read the second byte
               var secondByte = (byte) data.ReadBits(8, 8); // secondByte is now 0b00001111

               // write 0b1011 into the upper nybble
               secondByte = secondByte.StoreBits(0b1011, 4, 4); // secondByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 32) // value is now 0b11111111111111111111111111111111
               .SetBits() // this is the equivalent as above
               .ClearBits(4, 8) // value is now 01111111111111111b1111000000001111
               .ToggleBits(); // value is now 0b00000000000000000000111111110000

               secondByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
               .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData is 0b00000000000000000000111111110000

               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big)
               .StoreByte(0b01010101, 0, Endian.Little) // lower byte is now 0b01010101
               ;
               // mutatedData is now 0b10111111000000000000111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b00000000, 0b00001111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b00001111,
               // 0b00000000, 0b10111111]

               var leBaToInt32Le = leBa.ToInt32(Endian.Little); // leBaToInt32Le = 0b10111111000000000000111101010101

               var leBaToInt32Be = leBa.ToInt32(Endian.Big); // leBaToInt32Be = 0b01010101000011110000000010111111

            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.AreAllBitsSet(System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.Int32"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.AreAnyBitsSet(System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.Int32"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.AreNoBitsSet(System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.Int32"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.BitwiseToSingle(System.Int32)">
         <summary>
            Converts a
            <see cref="T:System.Int32"/>
            to the bit-wise identical
            <see cref="T:System.Single"/>
         </summary>
         <param name="value">The value to convert.</param>
         <returns>the
            <see cref="T:System.Single"/>
            representation of the bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ToBooleanArray(System.Int32)">
         <summary>
            Converts a
            <see cref="T:System.Int32"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0.
         </summary>
         <param name="bits">The
            <see cref="T:System.UInt32"/>
            to convert.
         </param>
         <returns>An array with the Least Significant Bit at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ToByteArray(System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Converts a
            <see cref="T:System.Int32"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">The value to convert to a
            <see cref="T:System.Byte"/>
            array.
         </param>
         <param name="endian">The order in which to store the bytes</param>
         <returns>The value as an array in the requested byte order</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ClearBits(System.Int32,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ClearBit(System.Int32,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/0.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ClearBits(System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ReadBits(System.Int32,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ReadBits(System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The unshifted extracted bits</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int32Extensions.ReadBits(System.Int32,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The number of bits to right shift the result of applying the<see
            cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ReadBit(System.Int32,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int32Extensions.ReadBytes(System.Int32,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a set of bytes starting at the specified byte location within the value.
         </summary>
         <param name="value">The value to read the bytes from.</param>
         <param name="offset">The byte offset to starting reading from.</param>
         <param name="size">The requested number of bytes to read.</param>
         <param name="endian">The endianness of the indexing for the byte read.</param>
         <returns>A byte array of the value in the specified endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int32Extensions.ReadByte(System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a single byte from the value at the specified byte offset.
         </summary>
         <param name="value">The value to read the byte from.</param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The specified byte.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.SetBits(System.Int32,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.SetBit(System.Int32,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.SetBits(System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int32Extensions.StoreBits(System.Int32,System.Int32,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int32Extensions.StoreBits(System.Int32,System.Int32,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.StoreBit(System.Int32,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int32Extensions.StoreBytes(System.Int32,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int32Extensions.StoreBytes(System.Int32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int32Extensions.StoreByte(System.Int32,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a single byte to the value at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="byte">The
            <see cref="T:System.Byte"/>
            value to store.
         </param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness for indexing into the bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ToggleBits(System.Int32,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ToggleBit(System.Int32,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int32Extensions.ToggleBits(System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="T:Jcd.BitManipulation.Int64Extensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.Int64"/>
         </summary>
         <example>
            <code>
               long data = 0;

               // turn on all the bits
               data = data.SetBits(0, 64); // value is now
               // 0b1111111111111111111111111111111111111111111111111111111111111111
               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now
               0b1111111111111111111111111111111111111111111111111111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now
               0b0000000000000000000000000000000000000000000000000000111111110000

               var finalData = data;

               // read the second byte
               var secondByte = (byte) data.ReadBits(8, 8); // secondByte is now 0b00001111

               // write 0b1011 into the upper nybble
               secondByte = secondByte.StoreBits(0b1011, 4, 4); // secondByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 64) // value is now
               0b1111111111111111111111111111111111111111111111111111111111111111
               .SetBits() // this is the equivalent as above
               .ClearBits(4, 8) // value is now 0b1111111111111111111111111111111111111111111111111111000000001111
               .ToggleBits(); // value is now 0b0000000000000000000000000000000000000000000000000000111111110000

               secondByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
               .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData is 0b0000000000000000000000000000000000000000000000000000111111110000
               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big)
               .StoreByte(0b01010101, 0, Endian.Little)
               ;
               // mutatedData is now 0b1011111100000000000000000000000000000000000000000000111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b00000000, 0b00000000, 0b00000000,
               // 0b00000000, 0b00000000, 0b00001111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b00001111, 0b00000000,
               0b00000000,
               // 0b00000000, 0b00000000, 0b00000000, 0b10111111]

               var leBaToInt64Le = leBa.ToInt64(Endian.Little); // leBaToInt64Le =
               0b1011111100000000000000000000000000000000000000000000111101010101

               var leBaToInt64Be = leBa.ToInt64(Endian.Big); // leBaToInt64Be =
               0b0101010100001111000000000000000000000000000000000000000010111111
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.AreAllBitsSet(System.Int64,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.Int64"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.AreAnyBitsSet(System.Int64,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.Int64"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.AreNoBitsSet(System.Int64,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.Int64"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.BitwiseToDouble(System.Int64)">
         <summary>
            Converts a
            <see cref="T:System.Int64"/>
            to the bit-wise identical
            <see cref="T:System.Double"/>
         </summary>
         <param name="value">The value to convert.</param>
         <returns>the
            <see cref="T:System.Double"/>
            representation of the bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ToBooleanArray(System.Int64)">
         <summary>
            Converts a
            <see cref="T:System.Int64"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0.
         </summary>
         <param name="bits">The
            <see cref="T:System.Int64"/>
            to convert.
         </param>
         <returns>An array with the Least Significant Bit at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ToByteArray(System.Int64,Jcd.BitManipulation.Endian)">
         <summary>
            Converts a
            <see cref="T:System.Int64"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">The value to convert to a
            <see cref="T:System.Byte"/>
            array.
         </param>
         <param name="endian">The order in which to store the bytes</param>
         <returns>The value as an array in the requested byte order</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ClearBits(System.Int64,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ClearBit(System.Int64,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/0.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ClearBits(System.Int64,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ReadBits(System.Int64,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ReadBits(System.Int64,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The unshifted extracted bits</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int64Extensions.ReadBits(System.Int64,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The bit offset to start reading from.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ReadBit(System.Int64,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int64Extensions.ReadBytes(System.Int64,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a set of bytes starting at the specified byte location within the value.
         </summary>
         <param name="value">The value to read the bytes from.</param>
         <param name="offset">The byte offset to starting reading from.</param>
         <param name="size">The requested number of bytes to read.</param>
         <param name="endian">The endianness of the indexing for the byte read.</param>
         <returns>A byte array of the value in the specified endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int64Extensions.ReadByte(System.Int64,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a single byte from the value at the specified byte offset.
         </summary>
         <param name="value">The value to read the byte from.</param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The specified byte.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.SetBits(System.Int64,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.SetBit(System.Int64,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.SetBits(System.Int64,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int64Extensions.StoreBits(System.Int64,System.Int64,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int64Extensions.StoreBits(System.Int64,System.Int64,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.StoreBit(System.Int64,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int64Extensions.StoreBytes(System.Int64,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int64Extensions.StoreBytes(System.Int64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.Int64Extensions.StoreByte(System.Int64,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a single byte to the value at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="byte">The
            <see cref="T:System.Byte"/>
            value to store.
         </param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness for indexing into the bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ToggleBits(System.Int64,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ToggleBit(System.Int64,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.Int64Extensions.ToggleBits(System.Int64,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="T:Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Provides byte level indexing operations (set, get) on the bytes of
            a copied value. It provides indexer-style access to the bytes of
            the value. Index zero is the least significant byte.
         </summary>
         <example>
            <code>
               // ByteIndexers on 64 bit values
               BigEndianByteIndexer bebi = 0xDECAFFC0FFEEC0DE;
               LittleEndianByteIndexer lebi = 0xDECAFFC0FFEEC0DE;

               Console.WriteLine(bebi.ToString()); // outputs: "DE CA FF C0 FF EE C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "DE C0 EE FF C0 FF CA DE"

               var bebib1 = bebi[1]; // bebib1 = 0xCA
               var lebib1 = lebi[1]; // lebib1 = 0xC0

               bebi[0] = 0x0A;
               lebi[0] = 0x0B;

               Console.WriteLine(bebi.ToString()); // outputs: "0A CA FF C0 FF EE C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "0B C0 EE FF C0 FF CA DE"

               // ByteIndexers on 32 bit values
               bebi = 0x600DC0DE;
               lebi = 0x600DC0DE;

               Console.WriteLine(bebi.ToString()); // outputs: "60 0D C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "DE C0 0D 60"

               bebib1 = bebi[1]; // bebib1 = 0x0D
               lebib1 = lebi[1]; // lebib1 = 0xC0

               bebi[0] = 0x0A;
               lebi[0] = 0x0B;

               Console.WriteLine(bebi.ToString()); // outputs: "0A 0D C0 DE"
               Console.WriteLine(lebi.ToString()); // outputs: "0B C0 0D 60"
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.UInt64)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Int64)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.Int64"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.UInt32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.UInt32"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Int32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.Int32"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.UInt16)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.UInt16"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Int16)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.Int16"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Byte)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.Byte"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.SByte)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.SByte"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Single)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.Single"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Double)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.Double"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <exclude/>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.UInt64,System.Int32)">
         <summary>
            Constructs a
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            from a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="data">The initial value for the underlying data.</param>
         <param name="byteSize">The number of bytes to index</param>
         <exclude/>
      </member>
      <member name="P:Jcd.BitManipulation.LittleEndianByteIndexer.Length">
         <summary>
            The number of bytes this type will index
         </summary>
      </member>
      <member name="F:Jcd.BitManipulation.LittleEndianByteIndexer.data">
         <summary>
            The backing store.
         </summary>
         <exclude/>
      </member>
      <member name="P:Jcd.BitManipulation.LittleEndianByteIndexer.Item(System.Int32)">
         <summary>
            Access bytes from the underlying data.
         </summary>
         <param name="index">The index of the byte to get or set.</param>
         <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or &gt;= Length</exception>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.Slice(System.Int32,System.Int32)">
         <summary>
            Get a subset of bytes given a starting offset and length.
         </summary>
         <param name="start">The starting bit offset</param>
         <param name="length">The number of bytes to extract</param>
         <returns>An array of bytes for the specified subset.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.UInt64">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data as a<see cref="T:System.UInt64"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Int64">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.UInt32">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Int32">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.UInt16">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Int16">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Byte">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.SByte">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Single">
         <summary>
            Implicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to a<see cref="T:System.Single"/>.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Double">
         <summary>
            Implicitly converts the byte indexer to its underlying data type.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Explicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Byte[]">
         <summary>
            Explicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to an array of bytes.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data converted to an array, serialized as big endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Explicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.ReadOnlySpan{System.Byte}">
         <summary>
            Explicitly converts the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            to an array of bytes.
         </summary>
         <param name="indexer">The indexer to convert.</param>
         <returns>The raw data converted to an array, serialized as big endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.UInt64)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.UInt64"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Int64)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Int64"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.UInt32)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.UInt32"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Int32)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Int32"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.UInt16)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.UInt16"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Int16)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Int16"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Byte)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Byte"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.SByte)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.SByte"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Single)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Single"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Double)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Implicitly converts a
            <see cref="T:System.Double"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Explicit(System.Byte[])~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Explicitly converts an array of bytes to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Explicit(System.ReadOnlySpan{System.Byte})~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Explicitly converts an array of bytes to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="data">The initial value for the bytes of data.</param>
         />
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Explicit(Jcd.BitManipulation.BigEndianByteIndexer)~Jcd.BitManipulation.LittleEndianByteIndexer">
         <summary>
            Explicitly converts a
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to a<see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>.
         </summary>
         <param name="indexer">The
            <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer"/>
            to copy the data from.
         </param>
         <returns>A new
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            instance.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.StoreBytes(System.Byte[],System.Int32,System.Int32)">
         <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
         </summary>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source to store. -1 means all bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.LittleEndianByteIndexer.StoreBytes(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
         <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
         </summary>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source to store. -1 means all bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.ToString">
         <summary>
            Formats the
            <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer"/>
            as a hexadecimal string in big endian notation.
            For example: `DE C0 0D 60`
         </summary>
         <returns>a string of the data formatted as hex bytes</returns>
      </member>
      <member name="T:Jcd.BitManipulation.NamespaceDoc">
         <summary>
            Provides extension methods and types that makes code for bit and byte manipulation
            on intrinsic data types easier to read vs the standard operators: `&amp;, |, ^, and ~`.
         </summary>
      </member>
      <member name="T:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions">
         <summary>
            Provides facilities to convert
            <see cref="T:System.ReadOnlySpan`1"/>
            of bytes to other data types.
         </summary>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToByte(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
         <summary>
            Converts bytes into a<see cref="T:System.Byte"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <returns>The converted
            <see cref="T:System.Byte"/>
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToSByte(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
         <summary>
            Converts bytes into a<see cref="T:System.SByte"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <returns>The converted
            <see cref="T:System.SByte"/>
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToUInt16(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts bytes into a<see cref="T:System.UInt16"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.UInt16"/>
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToInt16(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts bytes into a<see cref="T:System.Int16"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.Int16"/>
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToUInt32(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts bytes into a<see cref="T:System.UInt32"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.UInt32"/>
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToInt32(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts bytes into a<see cref="T:System.Int32"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.Int32"/>
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToUInt64(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts bytes into a<see cref="T:System.UInt64"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.UInt64"/>
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToInt64(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts bytes into a<see cref="T:System.Int64"/>, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">The endian for the bytes.</param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted
            <see cref="T:System.Int64"/>
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToDouble(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts bytes into a double, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
         </param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted ulong</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToSingle(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian,Jcd.BitManipulation.ByteAlignment)">
         <summary>
            Converts bytes into a double, discarding any excess data.
         </summary>
         <param name="data">the bytes to convert.</param>
         <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
         </param>
         <param name="align">Indicates how to align partial data</param>
         <returns>The converted ulong</returns>
      </member>
      <member name="T:Jcd.BitManipulation.SByteExtensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.SByte"/>
         </summary>
         <example>
            <code>
               sbyte data = 0b00000000;

               // turn on all the bits
               data = data.SetBits(0, 8); // value is now 0b11111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the upper 4 bits.
               data = data.ClearBits(4, 4); // value is now 0b00001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b11110000

               // read the upper nybble as a byte
               var upperNybble = data.ReadBits(4, 4); // upperNybble is now 0b00001111

               // write 0b1011 into the upper nybble of data
               data = data.StoreBits(0b1011, 4, 4); // data is now 0b10110000

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 8) // value is now 0b11111111
               .SetBits() // this is the equivalent as above
               .ClearBits(4, 4) // value is now 0b00001111
               .ToggleBits(); // value is now 0b11110000

               upperNybble = data.ReadBits(4, 4) // extract the upper nybble (0b00001111)
               .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.AreAllBitsSet(System.SByte,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.SByte"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.AreAnyBitsSet(System.SByte,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.SByte"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.AreNoBitsSet(System.SByte,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.SByte"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ToBooleanArray(System.SByte)">
         <summary>
            Converts a
            <see cref="T:System.SByte"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0.
         </summary>
         <param name="bits">The
            <see cref="T:System.SByte"/>
            to convert.
         </param>
         <returns>An array with the Least Significant Bit at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ToByteArray(System.SByte)">
         <summary>
            Converts a
            <see cref="T:System.SByte"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">The value to convert to a
            <see cref="T:System.Byte"/>
            array.
         </param>
         <returns>The value as an array in the requested byte order</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ClearBits(System.SByte,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ClearBit(System.SByte,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/0.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ClearBits(System.SByte,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ReadBits(System.SByte,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ReadBits(System.SByte,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The unshifted extracted bits</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SByteExtensions.ReadBits(System.SByte,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The number of bits to right shift the result of applying the<see
            cref="T:Jcd.BitManipulation.BitMask"/>.
         </param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ReadBit(System.SByte,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.SetBits(System.SByte,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.SetBit(System.SByte,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.SetBits(System.SByte,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SByteExtensions.StoreBits(System.SByte,System.SByte,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SByteExtensions.StoreBits(System.SByte,System.SByte,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.StoreBit(System.SByte,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ToggleBits(System.SByte,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ToggleBit(System.SByte,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SByteExtensions.ToggleBits(System.SByte,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="T:Jcd.BitManipulation.SingleExtensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.Single"/>
         </summary>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.AreAllBitsSet(System.Single,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.Single"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.AreAnyBitsSet(System.Single,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.Single"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.AreNoBitsSet(System.Single,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.Single"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.BitwiseToUInt32(System.Single)">
         <summary>
            Converts a
            <see cref="T:System.Single"/>
            to the bit-wise identical
            <see cref="T:System.UInt32"/>
         </summary>
         <param name="value">The value to convert.</param>
         <returns>the
            <see cref="T:System.UInt32"/>
            representation of the underlying bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.BitwiseToInt32(System.Single)">
         <summary>
            Converts a
            <see cref="T:System.Single"/>
            to the bit-wise identical
            <see cref="T:System.Int32"/>
         </summary>
         <param name="value">The value to convert.</param>
         <returns>the
            <see cref="T:System.Int32"/>
            representation of the underlying bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ToBooleanArray(System.Single)">
         <summary>
            Converts a
            <see cref="T:System.Single"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0.
         </summary>
         <param name="bits">The value to convert to an array of
            <see cref="T:System.Boolean"/>
            values.
         </param>
         <returns>the array. LSB at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ToByteArray(System.Single,Jcd.BitManipulation.Endian)">
         <summary>
            Converts a
            <see cref="T:System.Single"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">The value to convert to a
            <see cref="T:System.Byte"/>
            array.
         </param>
         <param name="endian">The order in which to store the bytes</param>
         <returns>The value as an array in the requested byte order</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ClearBits(System.Single,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ClearBit(System.Single,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/0.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ClearBits(System.Single,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ReadBits(System.Single,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ReadBits(System.Single,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The ushifted extracted bits</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SingleExtensions.ReadBits(System.Single,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The bit offset to start reading from.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ReadBit(System.Single,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SingleExtensions.ReadBytes(System.Single,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a set of bytes starting at the specified byte location within the value.
         </summary>
         <param name="value">The value to read the bytes from.</param>
         <param name="offset">The byte offset to starting reading from.</param>
         <param name="size">The requested number of bytes to read.</param>
         <param name="endian">The endianness of the indexing for the byte read.</param>
         <returns>A byte array of the value in the specified endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SingleExtensions.ReadByte(System.Single,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a single byte from the value at the specified byte offset.
         </summary>
         <param name="value">The value to read the byte from.</param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The specified byte.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.SetBits(System.Single,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.SetBit(System.Single,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.SetBits(System.Single,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SingleExtensions.StoreBits(System.Single,System.UInt32,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SingleExtensions.StoreBits(System.Single,System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.StoreBit(System.Single,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SingleExtensions.StoreBytes(System.Single,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SingleExtensions.StoreBytes(System.Single,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.SingleExtensions.StoreByte(System.Single,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a single byte to the value at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="byte">The
            <see cref="T:System.Byte"/>
            value to store.
         </param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ToggleBits(System.Single,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ToggleBit(System.Single,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.SingleExtensions.ToggleBits(System.Single,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="T:Jcd.BitManipulation.UInt16Extensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.UInt16"/>
         </summary>
         <example>
            <code>
               ushort data = 0b0000000000000000;

               // turn on all the bits
               data = data.SetBits(0, 16); // value is now 0b1111111111111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now 0b1111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b0000111111110000

               var finalData = data;

               // read the upper byte
               var upperByte = (byte) data.ReadBits(8, 8); // upperByte is now 0b00001111

               // write 0b1011 into the upper nybble
               upperByte = upperByte.StoreBits(0b1011, 4, 4); // upperByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 16) // value is now 0b1111111111111111
               .SetBits() // this is the equivalent as above
               .ClearBits(4, 8) // value is now 0b1111000000001111
               .ToggleBits(); // value is now 0b0000111111110000

               upperByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
               .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData 0b0000111111110000
               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big) // Upper byte is now 0b10111111
               .StoreByte(0b01010101, 0, Endian.Little); // lower byte is now 0b01010101

               // mutatedData is now 0b1011111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b10111111]

               var leBaToUInt16Le = leBa.ToUInt16(Endian.Little); // leBaToUInt16Le = 0b1011111101010101

               var leBaToUInt16Be = leBa.ToUInt16(Endian.Big); // leBaToUInt16Le = 0b0101010110111111
            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.AreAllBitsSet(System.UInt16,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.UInt16"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.AreAnyBitsSet(System.UInt16,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.UInt16"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.AreNoBitsSet(System.UInt16,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.UInt16"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ToBooleanArray(System.UInt16)">
         <summary>
            Converts a
            <see cref="T:System.UInt16"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0.
         </summary>
         <param name="bits">the bits of the
            <see cref="T:System.UInt16"/>
            to convert.
         </param>
         <returns>An array with the Least Significant Bit at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ToByteArray(System.UInt16,Jcd.BitManipulation.Endian)">
         <summary>
            Converts a
            <see cref="T:System.UInt16"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">The value to convert to a
            <see cref="T:System.Byte"/>
            array.
         </param>
         <param name="endian">The order in which to store the bytes</param>
         <returns>The value as an array in the requested byte order</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ClearBit(System.UInt16,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/0.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ClearBits(System.UInt16,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ReadBits(System.UInt16,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ReadBits(System.UInt16,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The unshifted extracted bits</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt16Extensions.ReadBits(System.UInt16,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The bit offset to start reading from.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ReadBit(System.UInt16,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt16Extensions.ReadBytes(System.UInt16,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a set of bytes starting at the specified byte location within the value.
         </summary>
         <param name="value">The value to read the bytes from.</param>
         <param name="offset">The byte offset to starting reading from.</param>
         <param name="size">The requested number of bytes to read.</param>
         <param name="endian">The endianness of the indexing for the byte read.</param>
         <returns>A byte array of the value in the specified endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt16Extensions.ReadByte(System.UInt16,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a single byte from the value at the specified byte offset.
         </summary>
         <param name="value">The value to read the byte from.</param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The specified byte.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.SetBits(System.UInt16,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.SetBit(System.UInt16,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt16Extensions.StoreByte(System.UInt16,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a single byte to the value at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="byte">The
            <see cref="T:System.Byte"/>
            value to store.
         </param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness for indexing into the bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt16Extensions.StoreBytes(System.UInt16,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt16Extensions.StoreBytes(System.UInt16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.SetBits(System.UInt16,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt16Extensions.StoreBits(System.UInt16,System.UInt16,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt16Extensions.StoreBits(System.UInt16,System.UInt16,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.StoreBit(System.UInt16,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ToggleBits(System.UInt16,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ToggleBit(System.UInt16,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ToggleBits(System.UInt16,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt16Extensions.ClearBits(System.UInt16,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="T:Jcd.BitManipulation.UInt32Extensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.UInt32"/>
         </summary>
         <example>
            <code>
               uint data = 0;

               // turn on all the bits
               data = data.SetBits(0, 32); // value is now 0b11111111111111111111111111111111

               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now 0b11111111111111111111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now 0b00000000000000000000111111110000

               var finalData = data;

               // read the second byte
               var secondByte = (byte) data.ReadBits(8, 8); // secondByte is now 0b00001111

               // write 0b1011 into the upper nybble
               secondByte = secondByte.StoreBits(0b1011, 4, 4); // secondByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 32) // value is now 0b11111111111111111111111111111111
               .SetBits() // this is the equivalent as above
               .ClearBits(4, 8) // value is now 01111111111111111b1111000000001111
               .ToggleBits(); // value is now 0b00000000000000000000111111110000

               secondByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
               .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now upperByte is now 0b10111111

               // finalData is 0b00000000000000000000111111110000

               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big)
               .StoreByte(0b01010101, 0, Endian.Little) // lower byte is now 0b01010101
               ;
               // mutatedData is now 0b10111111000000000000111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b00000000, 0b00001111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b00001111,
               // 0b00000000, 0b10111111]

               var leBaToUInt32Le = leBa.ToUInt32(Endian.Little); // leBaToUInt32Le = 0b10111111000000000000111101010101

               var leBaToUInt32Be = leBa.ToUInt32(Endian.Big); // leBaToUInt32Be = 0b01010101000011110000000010111111

            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.AreAllBitsSet(System.UInt32,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.UInt32"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.AreAnyBitsSet(System.UInt32,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.UInt32"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.AreNoBitsSet(System.UInt32,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.UInt32"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
         <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
         </remarks>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.BitwiseToSingle(System.UInt32)">
         <summary>
            Converts a
            <see cref="T:System.UInt32"/>
            to the bit-wise identical
            <see cref="T:System.Single"/>
         </summary>
         <param name="value">The value to convert.</param>
         <returns>the
            <see cref="T:System.Single"/>
            representation of the bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ToBooleanArray(System.UInt32)">
         <summary>
            Converts a
            <see cref="T:System.UInt32"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0.
         </summary>
         <param name="bits">The
            <see cref="T:System.UInt32"/>
            to convert.
         </param>
         <returns>An array with the Least Significant Bit at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ToByteArray(System.UInt32,Jcd.BitManipulation.Endian)">
         <summary>
            Converts a
            <see cref="T:System.UInt32"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">The value to convert to a
            <see cref="T:System.Byte"/>
            array.
         </param>
         <param name="endian">The order in which to store the bytes</param>
         <returns>The value as an array in the requested byte order</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ClearBits(System.UInt32,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ClearBit(System.UInt32,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/0.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ClearBits(System.UInt32,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ReadBits(System.UInt32,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ReadBits(System.UInt32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The unshifted extracted bits</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt32Extensions.ReadBits(System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The bit offset to start reading from.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ReadBit(System.UInt32,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt32Extensions.ReadBytes(System.UInt32,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a set of bytes starting at the specified byte location within the value.
         </summary>
         <param name="value">The value to read the bytes from.</param>
         <param name="offset">The byte offset to starting reading from.</param>
         <param name="size">The requested number of bytes to read.</param>
         <param name="endian">The endianness of the indexing for the byte read.</param>
         <returns>A byte array of the value in the specified endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt32Extensions.ReadByte(System.UInt32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a single byte from the value at the specified byte offset.
         </summary>
         <param name="value">The value to read the byte from.</param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The specified byte.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.SetBits(System.UInt32,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.SetBit(System.UInt32,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.SetBits(System.UInt32,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt32Extensions.StoreBits(System.UInt32,System.UInt32,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt32Extensions.StoreBits(System.UInt32,System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.StoreBit(System.UInt32,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt32Extensions.StoreBytes(System.UInt32,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt32Extensions.StoreBytes(System.UInt32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt32Extensions.StoreByte(System.UInt32,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a single byte to the value at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="byte">The
            <see cref="T:System.Byte"/>
            value to store.
         </param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness for indexing into the bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ToggleBits(System.UInt32,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ToggleBit(System.UInt32,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt32Extensions.ToggleBits(System.UInt32,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="T:Jcd.BitManipulation.UInt64Extensions">
         <summary>
            Provides easy to read methods for bit manipulation operations on a
            <see cref="T:System.UInt64"/>
         </summary>
         <example>
            <code>
               ulong data = 0;

               // turn on all the bits
               data = data.SetBits(0, 64); // value is now
               // 0b1111111111111111111111111111111111111111111111111111111111111111
               // this is the equivalent as above
               data = data.SetBits();

               // Clear the middle 4 bits.
               data = data.ClearBits(4, 8); // value is now
               // 0b1111111111111111111111111111111111111111111111111111000000001111

               // Toggle all the bits.
               data = data.ToggleBits(); // value is now
               // 0b0000000000000000000000000000000000000000000000000000111111110000

               var finalData = data;

               // read the second byte
               var secondByte = (byte) data.ReadBits(8, 8); // secondByte is now 0b00001111

               // write 0b1011 into the upper nybble
               secondByte = secondByte.StoreBits(0b1011, 4, 4); // secondByte is now 0b10111111

               // chaining operations, the same steps and end results
               data.ClearBits();
               data = data.SetBits(0, 64) // value is now
               0b1111111111111111111111111111111111111111111111111111111111111111
               .SetBits() // this is the equivalent as above
               .ClearBits(4, 8) // value is now 0b1111111111111111111111111111111111111111111111111111000000001111
               .ToggleBits(); // value is now 0b0000000000000000000000000000000000000000000000000000111111110000

               secondByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
               .StoreBits(0b1011, 4, 4); // store the value in the upper 4 bits, now
               // secondByte is now 0b10111111

               // finalData is 0b0000000000000000000000000000000000000000000000000000111111110000
               var beByte0 = finalData.ReadByte(0, Endian.Big); // 00001111
               var leByte0 = finalData.ReadByte(0, Endian.Little); // 11110000

               var mutatedData = finalData.StoreByte(0b10111111, 0, Endian.Big)
               .StoreByte(0b01010101, 0, Endian.Little)
               ;
               // mutatedData is now 0b1011111100000000000000000000000000000000000000000000111101010101

               var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b00000000, 0b00000000, 0b00000000,
               // 0b00000000, 0b00000000, 0b00001111, 0b01010101]

               var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b00001111, 0b00000000,
               0b00000000,
               // 0b00000000, 0b00000000, 0b00000000, 0b10111111]

               var leBaToUInt64Le = leBa.ToUInt64(Endian.Little); // leBaToUInt64Le =
               0b1011111100000000000000000000000000000000000000000000111101010101

               var leBaToUInt64Be = leBa.ToUInt64(Endian.Big); // leBaToUInt64Be =
               0b0101010100001111000000000000000000000000000000000000000010111111

            </code>
         </example>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.AreAllBitsSet(System.UInt64,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if all of the bits from the bitmask are set on a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.AreAnyBitsSet(System.UInt64,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if any bits from the bitmask are set on a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if any of the bits from the bitmask were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.AreNoBitsSet(System.UInt64,Jcd.BitManipulation.BitMask)">
         <summary>
            Tests if none of the bits from the bitmask are set on a<see cref="T:System.UInt64"/>.
         </summary>
         <param name="data">The data to inspect.</param>
         <param name="bitmask">The bits to test.</param>
         <returns>True if all of the bits from the bitmask were set.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.BitwiseToDouble(System.UInt64)">
         <summary>
            Converts a
            <see cref="T:System.UInt64"/>
            to the bit-wise identical
            <see cref="T:System.Double"/>
         </summary>
         <param name="value">The value to convert.</param>
         <returns>the
            <see cref="T:System.Double"/>
            representation of the bits
         </returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ToBooleanArray(System.UInt64)">
         <summary>
            Converts a
            <see cref="T:System.UInt64"/>
            into an array of
            <see cre="bool"/>
            values with the lease significant bit at index 0.
         </summary>
         <param name="bits">The value to convert to an array of
            <see cref="T:System.Boolean"/>
            values.
         </param>
         <returns>An array with the Least Significant Bit at index 0</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ToByteArray(System.UInt64,Jcd.BitManipulation.Endian)">
         <summary>
            Converts a
            <see cref="T:System.UInt64"/>
            into an array of bytes in the specified<see cref="T:Jcd.BitManipulation.Endian"/>.
         </summary>
         <param name="data">The value to convert to a
            <see cref="T:System.Byte"/>
            array.
         </param>
         <param name="endian">The order in which to store the bytes</param>
         <returns>The value as an array in the requested byte order</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ClearBits(System.UInt64,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of where to begin clearing bits.</param>
         <param name="size">The number of bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ClearBit(System.UInt64,System.Int32)">
         <summary>
            Sets the specified bit to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit position to set to false/0.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ClearBits(System.UInt64,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all bits from the provided mask to "off" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bit mask of the bits to clear.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ReadBits(System.UInt64,System.Int32,System.Int32)">
         <summary>
            Reads the bits specified and returns the result shifted to the right by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The bit offset to start reading from.</param>
         <param name="size">The total number of bits to extract.</param>
         <returns>The value stored in the range of bits specified, right shifted by the offset..</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ReadBits(System.UInt64,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The unshifted extracted bits</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt64Extensions.ReadBits(System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="shift">The bit offset to start reading from.</param>
         <param name="mask">The bitmask specifying which bits to read.</param>
         <returns>The extracted bits right shifted by the specified amount.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ReadBit(System.UInt64,System.Int32)">
         <summary>
            Reads a single bit from the specified position.
         </summary>
         <param name="value">The source of the bits to read.</param>
         <param name="offset">The offset of the bit to read.</param>
         <returns>The bit at the specified position returned as a<see cref="T:System.Boolean"/>.
         </returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt64Extensions.ReadBytes(System.UInt64,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a set of bytes starting at the specified byte location within the value.
         </summary>
         <param name="value">The value to read the bytes from.</param>
         <param name="offset">The byte offset to starting reading from.</param>
         <param name="size">The requested number of bytes to read.</param>
         <param name="endian">The endianness of the indexing for the byte read.</param>
         <returns>A byte array of the value in the specified endian.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt64Extensions.ReadByte(System.UInt64,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Reads a single byte from the value at the specified byte offset.
         </summary>
         <param name="value">The value to read the byte from.</param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The specified byte.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.SetBits(System.UInt64,System.Int32,System.Int32)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The number of bits to set on.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.SetBit(System.UInt64,System.Int32)">
         <summary>
            Sets the bit at the specified to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bit to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.SetBits(System.UInt64,Jcd.BitManipulation.BitMask)">
         <summary>
            Sets all specified bits to "on" and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt64Extensions.StoreBits(System.UInt64,System.UInt64,System.Int32,System.Int32)">
         <summary>
            Stores a range of bits to the value, from a source value, and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="source">The value to be stored at the bit location.</param>
         <param name="offset">The bit location to store the value.</param>
         <param name="size">The bit size of the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt64Extensions.StoreBits(System.UInt64,System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
         <summary>
            Stores a set of bits specified by a
            <see cref="T:Jcd.BitManipulation.BitMask"/>
            from a source value to a bit offset and returns the modified
            value.
         </summary>
         <param name="value">the destination for the stored bits</param>
         <param name="source">The source of the bits to store.</param>
         <param name="offset">The destination offset of where to store the bits.</param>
         <param name="mask">The mask specifying the bits to store</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.StoreBit(System.UInt64,System.Boolean,System.Int32)">
         <summary>
            Store a single bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bit">The value to store at the specified bit offset.</param>
         <param name="offset">The offset of the bit to store.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt64Extensions.StoreBytes(System.UInt64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt64Extensions.StoreBytes(System.UInt64,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a set of bytes starting at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="bytes">The value to be stored at the byte location.</param>
         <param name="offset">The byte location to store the value.</param>
         <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
         <param name="endian">The endianness of the byte indexing within the value.</param>
         <returns>The modified value.</returns>
      </member>
      <member
         name="M:Jcd.BitManipulation.UInt64Extensions.StoreByte(System.UInt64,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
         <summary>
            Stores a single byte to the value at the specified byte offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="byte">The
            <see cref="T:System.Byte"/>
            value to store.
         </param>
         <param name="offset">The offset of where to store the byte.</param>
         <param name="endian">The endianness for indexing into the bytes.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ToggleBits(System.UInt64,System.Int32,System.Int32)">
         <summary>
            Toggles the specified range of bits and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The offset of the bits to toggle.</param>
         <param name="size">The number of bits to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ToggleBit(System.UInt64,System.Int32)">
         <summary>
            Toggles a bit at the specified offset and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="offset">The bit location to toggle.</param>
         <returns>The modified value.</returns>
      </member>
      <member name="M:Jcd.BitManipulation.UInt64Extensions.ToggleBits(System.UInt64,Jcd.BitManipulation.BitMask)">
         <summary>
            Toggle all the bits specified in the provided bit mask and returns the modified value.
         </summary>
         <param name="value">The value to modify.</param>
         <param name="mask">The bits to set.</param>
         <returns>The modified value.</returns>
      </member>
   </members>
</doc>
