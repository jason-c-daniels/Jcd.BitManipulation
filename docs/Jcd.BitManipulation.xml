<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.BitManipulation</name>
    </assembly>
    <members>
        <member name="T:Jcd.BitManipulation.AreAllBitsSetExtensions">
            <summary>
            Provides the ability to check if all bits from a <see cref="T:Jcd.BitManipulation.BitMask"/> are set on integral integer types.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.AreAllBitsSetExtensions.AreAllBitsSet(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.AreAllBitsSetExtensions.AreAllBitsSet(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.Int64"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.AreAllBitsSetExtensions.AreAllBitsSet(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAllBitsSetExtensions.AreAllBitsSet(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on an <see cref="T:System.Int32"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAllBitsSetExtensions.AreAllBitsSet(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAllBitsSetExtensions.AreAllBitsSet(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.Int16"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAllBitsSetExtensions.AreAllBitsSet(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.Byte"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAllBitsSetExtensions.AreAllBitsSet(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on an <see cref="T:System.SByte"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="T:Jcd.BitManipulation.AreAnyBitsSetExtensions">
            <summary>
            Provides the ability to check if any bits from a <see cref="T:Jcd.BitManipulation.BitMask"/> are set on integral integer types.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.AreAnyBitsSetExtensions.AreAnyBitsSet(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.AreAnyBitsSetExtensions.AreAnyBitsSet(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.Int64"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.AreAnyBitsSetExtensions.AreAnyBitsSet(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAnyBitsSetExtensions.AreAnyBitsSet(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on an <see cref="T:System.Int32"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAnyBitsSetExtensions.AreAnyBitsSet(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAnyBitsSetExtensions.AreAnyBitsSet(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.Int16"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAnyBitsSetExtensions.AreAnyBitsSet(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.Byte"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreAnyBitsSetExtensions.AreAnyBitsSet(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on an <see cref="T:System.SByte"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="T:Jcd.BitManipulation.AreNoBitsSetExtensions">
            <summary>
            Provides the ability to check if no bits from a <see cref="T:Jcd.BitManipulation.BitMask"/> are set on integral integer types.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.AreNoBitsSetExtensions.AreNoBitsSet(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.AreNoBitsSetExtensions.AreNoBitsSet(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.Int64"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.AreNoBitsSetExtensions.AreNoBitsSet(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreNoBitsSetExtensions.AreNoBitsSet(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on an <see cref="T:System.Int32"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreNoBitsSetExtensions.AreNoBitsSet(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreNoBitsSetExtensions.AreNoBitsSet(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.Int16"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreNoBitsSetExtensions.AreNoBitsSet(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.Byte"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.AreNoBitsSetExtensions.AreNoBitsSet(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on an <see cref="T:System.SByte"/>.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used. 
            </remarks>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexers.BitIndexerByte">
            <summary>
            Provides enumeration and indexed access to the bits on a stored byte. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexers.BitIndexerByte.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerByte.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerByte.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerByte.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerByte.op_Implicit(System.Byte)~Jcd.BitManipulation.BitIndexers.BitIndexerByte">
            <summary>
            Automatically Convert from a byte to a BitIndexerByte
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerByte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerByte.op_Implicit(Jcd.BitManipulation.BitIndexers.BitIndexerByte)~System.Byte">
            <summary>
            Automatically convert from a BitIndexerByte to a byte
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerByte.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerByte.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerByte.Slice(System.Int32,System.Int32)">
            <summary>
            Gets a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerByte.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexers.BitIndexerInt16">
            <summary>
            Provides enumeration and indexed access to the bits on a stored short. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.op_Implicit(System.Int16)~Jcd.BitManipulation.BitIndexers.BitIndexerInt16">
            <summary>
            Automatically Convert from a short to a BitIndexerInt16
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerInt16</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.op_Implicit(Jcd.BitManipulation.BitIndexers.BitIndexerInt16)~System.Int16">
            <summary>
            Automatically convert from a BitIndexerInt16 to a short
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the short</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt16.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexers.BitIndexerInt32">
            <summary>
            Provides enumeration and indexed access to the bits on a stored int. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.op_Implicit(System.Int32)~Jcd.BitManipulation.BitIndexers.BitIndexerInt32">
            <summary>
            Automatically Convert from an int to a BitIndexerInt32
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerInt32</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.op_Implicit(Jcd.BitManipulation.BitIndexers.BitIndexerInt32)~System.Int32">
            <summary>
            Automatically convert from a BitIndexerInt32 to an int
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the int</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt32.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexers.BitIndexerInt64">
            <summary>
            Provides enumeration and indexed access to the bits on a stored long. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.op_Implicit(System.Int64)~Jcd.BitManipulation.BitIndexers.BitIndexerInt64">
            <summary>
            Automatically Convert from a long to a BitIndexerInt64
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerInt64</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.op_Implicit(Jcd.BitManipulation.BitIndexers.BitIndexerInt64)~System.Int64">
            <summary>
            Automatically convert from a BitIndexerInt64 to a long
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the long</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.Slice(System.Int32,System.Int32)">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerInt64.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexers.BitIndexerSByte">
            <summary>
            Provides enumeration and indexed access to the bits on a stored sbyte. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.op_Implicit(System.SByte)~Jcd.BitManipulation.BitIndexers.BitIndexerSByte">
            <summary>
            Automatically Convert from an sbyte to a BitIndexerSByte
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerSByte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.op_Implicit(Jcd.BitManipulation.BitIndexers.BitIndexerSByte)~System.SByte">
            <summary>
            Automatically convert from a BitIndexerSByte to an sbyte
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the sbyte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerSByte.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16">
            <summary>
            Provides enumeration and indexed access to the bits on a stored ushort. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.op_Implicit(System.UInt16)~Jcd.BitManipulation.BitIndexers.BitIndexerUInt16">
            <summary>
            Automatically Convert from a ushort to a BitIndexerUInt16
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerUInt16</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.op_Implicit(Jcd.BitManipulation.BitIndexers.BitIndexerUInt16)~System.UInt16">
            <summary>
            Automatically convert from a BitIndexerUInt16 to a ushort
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the ushort</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt16.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32">
            <summary>
            Provides enumeration and indexed access to the bits on a stored uint. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.op_Implicit(System.UInt32)~Jcd.BitManipulation.BitIndexers.BitIndexerUInt32">
            <summary>
            Automatically Convert from a uint to a BitIndexerUInt32
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerUInt32</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.op_Implicit(Jcd.BitManipulation.BitIndexers.BitIndexerUInt32)~System.UInt32">
            <summary>
            Automatically convert from a BitIndexerUInt32 to a uint
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the uint</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt32.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64">
            <summary>
            Provides enumeration and indexed access to the bits on a stored ulong. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.op_Implicit(System.UInt64)~Jcd.BitManipulation.BitIndexers.BitIndexerUInt64">
            <summary>
            Automatically Convert from a ulong to a BitIndexerUInt64
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerUInt64</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.op_Implicit(Jcd.BitManipulation.BitIndexers.BitIndexerUInt64)~System.UInt64">
            <summary>
            Automatically convert from a BitIndexerUInt64 to a ulong
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.BitIndexerUInt64.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexers.IBitIndexer">
            <summary>
            The basic interface for indexing bits within an integer data type.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.IBitIndexer.Length">
            <summary>
            The number of addressable bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexers.IBitIndexer.Item(System.Int32)">
            <summary>
            Gets or sets a bit
            </summary>
            <param name="index">the offset of the bit to get or set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.IBitIndexer.Slice(System.Int32,System.Int32)">
            <summary>
            Gets a slice of bits from the backing store
            </summary>
            <param name="start">starting offset of the bits to retrieve</param>
            <param name="length">the number of bits to get</param>
            <returns>Array of bits extracted</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexers.IBitIndexer.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitMask">
            <summary>
            An conceptual abstraction for a bit mask.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.AllBits">
            <summary>
            A default bitmask signifying all bits have been set.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Bits">
            <summary>
            The backing store for the actual bits of the <see cref="T:Jcd.BitManipulation.BitMask"/>.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.FromRange(System.Int32,System.Int32)">
            <summary>
            Create a 64 bit <see cref="T:Jcd.BitManipulation.BitMask"/> with a range of bits set.  
            </summary>
            <param name="offset">the lowest bit to start turning on</param>
            <param name="size">the number of bits to set to 1</param>
            <returns>the shifted mask</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.FromSingleBit(System.Int32)">
            <summary>
            Create a 64 bit bit <see cref="T:Jcd.BitManipulation.BitMask"/> with a single bit set.
            </summary>
            <param name="offset">the bit to set</param>
            <returns>a <see cref="T:Jcd.BitManipulation.BitMask"/> with the specified bit set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(Jcd.BitManipulation.BitMask)">
            <summary>
            Copies an existing <see cref="T:Jcd.BitManipulation.BitMask"/>
            </summary>
            <param name="mask">The <see cref="T:Jcd.BitManipulation.BitMask"/> to copy</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.UInt64"/>  
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask"/> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.Int64"/>  
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask"/> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.UInt32"/>  
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask"/> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask"/> from an <see cref="T:System.Int32"/>  
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask"/> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt16)">
            <summary>
            Create a bitmask  
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask"/> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.Int16"/>  
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask"/> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Byte)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.Byte"/>  
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask"/> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.SByte)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask"/> from an <see cref="T:System.SByte"/>  
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask"/> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.ToString">
            <summary>
            Formats the <see cref="T:Jcd.BitManipulation.BitMask"/> as a "0b" prefixed string of zeroes and ones.
            </summary>
            <returns>the bits of the mask formatted as 0b0101...1111</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.SByte">
            <summary>
            Automatically convert to <see cref="T:System.SByte"/> from a <see cref="T:Jcd.BitManipulation.BitMask"/>
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask"/> to convert from.</param>
            <returns>the lowest 8 bits of the mask as a signed byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Byte">
            <summary>
            Automatically convert to <see cref="T:System.Byte"/> from a <see cref="T:Jcd.BitManipulation.BitMask"/>
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask"/> to convert from.</param>
            <returns>the lowest 8 bits of the mask as a byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int16">
            <summary>
            Automatically convert to <see cref="T:System.Int16"/> from a <see cref="T:Jcd.BitManipulation.BitMask"/>
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask"/> to convert from.</param>
            <returns>the lowest 16 bits of the mask as a short</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt16">
            <summary>
            Automatically convert to <see cref="T:System.UInt16"/> from a <see cref="T:Jcd.BitManipulation.BitMask"/>
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask"/> to convert from.</param>
            <returns>the lowest 16 bits of the mask as a ushort</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int32">
            <summary>
            Automatically convert to <see cref="T:System.Int32"/> from a <see cref="T:Jcd.BitManipulation.BitMask"/>
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask"/> to convert from.</param>
            <returns>the lowest 32 bits of the mask as an int</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt32">
            <summary>
            Automatically convert to <see cref="T:System.UInt32"/> from a <see cref="T:Jcd.BitManipulation.BitMask"/>
            </summary>
            <param name="mask"></param>
            <returns>the lowest 32 bits of the mask as a uint</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int64">
            <summary>
            Automatically convert to <see cref="T:System.Int64"/> from a <see cref="T:Jcd.BitManipulation.BitMask"/>
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask"/> to convert from.</param>
            <returns>the bits of the mask as a long</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt64">
            <summary>
            Automatically convert to <see cref="T:System.UInt64"/> from a <see cref="T:Jcd.BitManipulation.BitMask"/>
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask"/> to convert from.</param>
            <returns>the bits of the mask as a ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.SByte)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask"/> from an <see cref="T:System.SByte"/>
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask"/></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask"/> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int16)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.Byte"/>
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask"/> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int32)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask"/> from an <see cref="T:System.Int32"/>
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask"/></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask"/> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int64)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.Int64"/>
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask"/></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask"/> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Byte)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.Byte"/>
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask"/></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask"/> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt16)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.UInt16"/>
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask"/></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask"/> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt32)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.UInt32"/>
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask"/></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask"/> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt64)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask"/> from a <see cref="T:System.UInt64"/>
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask"/></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask"/> object constructed from the bits</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BooleanArrayExtensions">
            <summary>
            A bunch of extension methods to help with converting numbers to and from arrays of bools
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.Byte)">
            <summary>
            Convert a byte into an array of bools
            </summary>
            <param name="bits">the byte to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.SByte)">
            <summary>
            Convert an sbyte into an array of bools
            </summary>
            <param name="bits">the sbyte to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.UInt16)">
            <summary>
            Convert a ushort into an array of bools
            </summary>
            <param name="bits">the bits of the ushort to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.Int16)">
            <summary>
            Convert a short into an array of bools
            </summary>
            <param name="bits">the short to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.UInt32)">
            <summary>
            Convert a uint into an array of bools
            </summary>
            <param name="bits">the uint to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.Int32)">
            <summary>
            Convert an int into an array of bools
            </summary>
            <param name="bits">the int to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.UInt64)">
            <summary>
            Convert a ulong into an array of bools
            </summary>
            <param name="bits">the ulong to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.Int64)">
            <summary>
            Convert a long into an array of bools
            </summary>
            <param name="bits">the long to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToByte(System.Boolean[])">
            <summary>
            Converts an array of bools into a byte, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToSByte(System.Boolean[])">
            <summary>
            Converts an array of bools into an sbyte, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted sbyte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt16(System.Boolean[])">
            <summary>
            Converts an array of bools into a ushort, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted ushort</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt16(System.Boolean[])">
            <summary>
            Converts an array of bools into a short, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted short</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt32(System.Boolean[])">
            <summary>
            Converts an array of bools into a uint, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted uint</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt32(System.Boolean[])">
            <summary>
            Converts an array of bools into an int, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted int</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt64(System.Boolean[])">
            <summary>
            Converts an array of bools into a ulong, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt64(System.Boolean[])">
            <summary>
            Converts an array of bools into a long, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted long</returns>
        </member>
        <member name="T:Jcd.BitManipulation.ByteArrayExtensions">
            <summary>
            A bunch of extension methods to help with converting numbers to and from arrays of bools
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByteArray(System.Byte)">
            <summary>
            Convert a byte into an array of bytes
            </summary>
            <param name="data">the byte to convert</param>
            <returns>an array containing the byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByteArray(System.SByte)">
            <summary>
            Convert an sbyte into an array of bytes
            </summary>
            <param name="data">the sbyte to convert</param>
            <returns>an array containing the byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByteArray(System.UInt16,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a ushort into an array of bytes
            </summary>
            <param name="data">the data of the ushort to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByteArray(System.Int16,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a short into an array of bytes
            </summary>
            <param name="data">the short to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByteArray(System.UInt32,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a uint into an array of bytes
            </summary>
            <param name="data">the uint to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByteArray(System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Convert an int into an array of bytes
            </summary>
            <param name="data">the int to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByteArray(System.UInt64,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a ulong into an array of bytes
            </summary>
            <param name="data">the ulong to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByteArray(System.Int64,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a long into an array of bytes
            </summary>
            <param name="data">the long to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByte(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a byte, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToSByte(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into an sbyte, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted sbyte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt16(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a ushort, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted ushort</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt16(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a short, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted short</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt32(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a uint, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted uint</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt32(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into an int, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted int</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt64(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a ulong, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt64(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a long, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted long</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByte(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a byte, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToSByte(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into an sbyte, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted sbyte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt16(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a ushort, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted ushort</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt16(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a short, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted short</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt32(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a uint, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted uint</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt32(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into an int, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted int</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt64(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a ulong, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt64(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a long, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted long</returns>
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16">
            <summary>
            Provides byte level indexing operations (set, get) on an <see cref="T:System.Int16"/>. Zero is the most significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.#ctor(System.Int16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16"/> from an <see cref="T:System.Int16"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.Length">
            <summary>
            The length of the indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.op_Implicit(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16)~System.Int16">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.op_Implicit(System.Int16)~Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16">
            <summary>
            Converts the underlying data type to the indexer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.Int32"/>. Zero is the most significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.#ctor(System.Int32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32"/> from an <see cref="T:System.Int32"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.Length">
            <summary>
            The length of the indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.op_Implicit(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32)~System.Int32">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.op_Implicit(System.Int32)~Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32">
            <summary>
            Converts the underlying data type to the indexer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64">
            <summary>
            Provides byte level indexing operations (set, get) on an <see cref="T:System.Int64"/>. Zero is the most significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.#ctor(System.Int64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64"/> from an <see cref="T:System.Int64"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.Length">
            <summary>
            The length of the indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.op_Implicit(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64)~System.Int64">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.op_Implicit(System.Int64)~Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64">
            <summary>
            Converts the underlying data type to the indexer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.UInt16"/>. Zero is the most significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.#ctor(System.UInt16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16"/> from a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.Length">
            <summary>
            The length of the indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.op_Implicit(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16)~System.UInt16">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.op_Implicit(System.UInt16)~Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16">
            <summary>
            Converts the underlying data type to the indexer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.UInt32"/>. Zero is the most significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.#ctor(System.UInt32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32"/> from a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.Length">
            <summary>
            The length of the indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.op_Implicit(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32)~System.UInt32">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.op_Implicit(System.UInt32)~Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32">
            <summary>
            Converts the underlying data type to the indexer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.UInt64"/>. Zero is the most significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.#ctor(System.UInt64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64"/> from a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.Length">
            <summary>
            The length of the indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.op_Implicit(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64)~System.UInt64">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.op_Implicit(System.UInt64)~Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64">
            <summary>
            Converts the underlying data type to the indexer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.IByteIndexer">
            <summary>
            The basic interface for indexing bits within an integer data type.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.IByteIndexer.Length">
            <summary>
            The number of addressable bytes.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.IByteIndexer.Item(System.Int32)">
            <summary>
            Gets or sets a bit
            </summary>
            <param name="index">the offset of the bit to get or set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.IByteIndexer.Slice(System.Int32,System.Int32)">
            <summary>
            Gets a slice of bytes from the backing store
            </summary>
            <param name="start">starting offset of the bits to retrieve</param>
            <param name="length">the number of bits to get</param>
            <returns>Array of bits extracted</returns>
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.Int16"/>. Zero is the least significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.#ctor(System.Int16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16"/> from an <see cref="T:System.Int16"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.Length">
            <summary>
            The length of the buffer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.op_Implicit(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16)~System.Int16">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.op_Implicit(System.Int16)~Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16">
            <summary>
            Converts the underlying data type to the buffer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A buffer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.Int32"/>. Zero is the least significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.#ctor(System.Int32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32"/> from an <see cref="T:System.Int32"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.Length">
            <summary>
            The length of the buffer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.op_Implicit(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32)~System.Int32">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.op_Implicit(System.Int32)~Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32">
            <summary>
            Converts the underlying data type to the buffer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A buffer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.Int64"/>. Zero is the least significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.#ctor(System.Int64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64"/> from an <see cref="T:System.Int64"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.Length">
            <summary>
            The length of the buffer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.op_Implicit(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64)~System.Int64">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.op_Implicit(System.Int64)~Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64">
            <summary>
            Converts the underlying data type to the buffer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A buffer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.UInt16"/>. Zero is the least significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.#ctor(System.UInt16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16"/> from a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.Length">
            <summary>
            The length of the buffer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.op_Implicit(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16)~System.UInt16">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.op_Implicit(System.UInt16)~Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16">
            <summary>
            Converts the underlying data type to the buffer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A buffer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.UInt32"/>. Zero is the least significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.#ctor(System.UInt32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32"/> from a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.Length">
            <summary>
            The length of the buffer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.op_Implicit(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32)~System.UInt32">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="buffer">The buffer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.op_Implicit(System.UInt32)~Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32">
            <summary>
            Converts the underlying data type to the buffer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A buffer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.UInt64"/>. Zero is the least significant byte.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.MaxByteIndex">
            <summary>
            The largest byte index available.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.#ctor(System.UInt64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64"/> from a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.Length">
            <summary>
            The length of the indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set. 0 is the least significant byte from the underlying storage.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.op_Implicit(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64)~System.UInt64">
            <summary>
            Converts the byte indexer to its underlying data type.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.op_Implicit(System.UInt64)~Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64">
            <summary>
            Converts the underlying data type to the indexer type.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Jcd.BitManipulation.ClearBitsExtensions">
            <summary>
            Extension methods to aid in clearing bits in various integer data types.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.SByte,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.Int16,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.Int32,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.Int64,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.Byte,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.UInt16,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.UInt32,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.UInt64,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.Endian">
            <summary>
            A type indicating which endian is in use. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.Endian.Little">
            <summary>
            Indicates that Little Endian is in use.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.Endian.Big">
            <summary>
            Indicates that Big Endian is in use.
            </summary>
        </member>
       <member name="T:Jcd.BitManipulation.FloatingPointExtensions">
          <summary>
             Methods to convert to and from like sized integers and floating point numbers.
          </summary>
       </member>
       <member name="M:Jcd.BitManipulation.FloatingPointExtensions.ToUInt32Bits(System.Single)">
          <summary>
             Converts a
             <see cref="T:System.Single"/>
             to the bit-wise identical
             <see cref="T:System.UInt32"/>
          </summary>
          <param name="value">The value to convert</param>
          <returns>the
             <see cref="T:System.UInt32"/>
             representation of the underlying bits
          </returns>
       </member>
       <member name="M:Jcd.BitManipulation.FloatingPointExtensions.ToInt32Bits(System.Single)">
          <summary>
             Converts a
             <see cref="T:System.Single"/>
             to the bit-wise identical
             <see cref="T:System.Int32"/>
          </summary>
          <param name="value">The value to convert</param>
          <returns>the
             <see cref="T:System.Int32"/>
             representation of the underlying bits
          </returns>
       </member>
       <member name="M:Jcd.BitManipulation.FloatingPointExtensions.FromUInt32Bits(System.UInt32)">
          <summary>
             Converts a
             <see cref="T:System.UInt32"/>
             to the bit-wise identical
             <see cref="T:System.Single"/>
          </summary>
          <param name="value">The value to convert</param>
          <returns>the
             <see cref="T:System.Single"/>
             representation of the bits
          </returns>
       </member>
       <member name="M:Jcd.BitManipulation.FloatingPointExtensions.FromInt32Bits(System.Int32)">
          <summary>
             Converts a
             <see cref="T:System.Int32"/>
             to the bit-wise identical
             <see cref="T:System.Single"/>
          </summary>
          <param name="value">The value to convert</param>
          <returns>the
             <see cref="T:System.Single"/>
             representation of the bits
          </returns>
       </member>
       <member name="M:Jcd.BitManipulation.FloatingPointExtensions.ToUInt64Bits(System.Double)">
          <summary>
             Converts a
             <see cref="T:System.Double"/>
             to the bit-wise identical
             <see cref="T:System.UInt64"/>
          </summary>
          <param name="value">The value to convert</param>
          <returns>the
             <see cref="T:System.UInt64"/>
             representation of the underlying bits
          </returns>
       </member>
       <member name="M:Jcd.BitManipulation.FloatingPointExtensions.ToInt64Bits(System.Double)">
          <summary>
             Converts a
             <see cref="T:System.Double"/>
             to the bit-wise identical
             <see cref="T:System.Int64"/>
          </summary>
          <param name="value">The value to convert</param>
          <returns>the
             <see cref="T:System.Int64"/>
             representation of the underlying bits
          </returns>
       </member>
       <member name="M:Jcd.BitManipulation.FloatingPointExtensions.FromUInt64Bits(System.UInt64)">
          <summary>
             Converts a
             <see cref="T:System.UInt64"/>
             to the bit-wise identical
             <see cref="T:System.Double"/>
          </summary>
          <param name="value">The value to convert</param>
          <returns>the
             <see cref="T:System.Double"/>
             representation of the bits
          </returns>
       </member>
       <member name="M:Jcd.BitManipulation.FloatingPointExtensions.FromInt64Bits(System.Int64)">
          <summary>
             Converts a
             <see cref="T:System.Int64"/>
             to the bit-wise identical
             <see cref="T:System.Double"/>
          </summary>
          <param name="value">The value to convert</param>
          <returns>the
             <see cref="T:System.Double"/>
             representation of the bits
          </returns>
       </member>
        <member name="T:Jcd.BitManipulation.NamespaceDoc">
            <summary>
            Provides a set of extension methods and types to assist with
            making bit manipulation code easier to read.
            </summary>
            <example>
            <code>
            ushort data = 0b0000000000000000;
            // turn on all the bits
            data=data.SetBits(0, 16); // value is now 0b1111111111111111
            
            // this is the equivalent as above
            data=data.SetBits();
            
            // Clear the middle 4 bits.
            data=data.ClearBits(4, 8); // value is now 0b1111000000001111
            
            // Toggle all the bits.
            data=data.ToggleBits(); // value is now 0b0000111111110000
            
            // read the upper byte 
            var upperByte = (byte)data.ReadBits(8, 8); // upperByte is now 0b00001111
            
            // write 0b1011 into the upper nybble
            upperByte=upperByte.StoreBits(0b1011, 4, 4); // upperByte is now 0b10111111
            
            // chaining operations, the same steps and end results
            data = 0;
            data = data.SetBits(0, 16) // value is now 0b1111111111111111
                .SetBits() // this is the equivalent as above
                .ClearBits(4, 8) // value is now 0b1111000000001111
                .ToggleBits(); // value is now 0b0000111111110000
            
            upperByte = ((byte)data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
                .StoreBits(0b1011, 4, 4);// store the value in the upper 4 bits, now upperByte is now 0b10111111
            
            </code>
            </example>
        </member>
        <member name="T:Jcd.BitManipulation.ReadBitsExtensions">
            <summary>
            Extension methods that enable reading one or more bits from a specified offset in an integer data type. 
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Byte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.SByte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.UInt64,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.Int64,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.UInt32,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.Int32,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.UInt16,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.Int16,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.Byte,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.SByte,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="T:Jcd.BitManipulation.ReadBytesExtensions">
            <summary>
            Extension methods that aid in storing values into byte offsets within another integer data type.
            The offsets are Least Significant Byte. Index 0 is the 8 least significant bits....etc.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(System.Int16,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            The offsets are in LSB, this means the array will be little endian.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(System.Int32,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            The offsets are in LSB, this means the array will be little endian.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(System.Int64,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            The offsets are in LSB, this means the array will be little endian.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(System.UInt16,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            The offsets are in LSB, this means the array will be little endian.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(System.UInt32,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            The offsets are in LSB, this means the array will be little endian.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(System.UInt64,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            The offsets are in LSB, this means the array will be little endian.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A big endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A big endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A big endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A big endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A big endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64,System.Int32,System.Int32)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store.</param>
            <returns>A big endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadByte(System.UInt64,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadByte(System.Int64,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadByte(System.UInt32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadByte(System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadByte(System.UInt16,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBytesExtensions.ReadByte(System.Int16,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.SetBitsExtensions">
            <summary>
            Extension methods that aid in turning bits on in an integer data type.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.SByte,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.Int16,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.Int32,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.Int64,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.Byte,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.UInt16,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.UInt32,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.UInt64,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.StoreBitsExtensions">
            <summary>
            Extension methods that aid in storing values into bit offsets within an integer data type.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.SByte,System.SByte,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int16,System.Int16,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt16,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt64,System.UInt64,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt64,System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int64,System.Int64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt32,System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int32,System.Int32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt16,System.UInt16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int16,System.Int16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Byte,System.Byte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.SByte,System.SByte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.UInt64,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.Int64,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.UInt16,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.Int16,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.Byte,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.SByte,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.StoreBytesExtensions">
            <summary>
            Extension methods that aid in storing values into byte offsets within another integer data type.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(System.Int16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(System.Int32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(System.Int64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(System.UInt16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(System.UInt32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(System.UInt64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is MSB, most significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is MSB, most significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is MSB, most significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreBytes(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="indexer">The indexer whose value is to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(System.UInt64,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(System.Int64,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(System.UInt32,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(System.Int32,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(System.UInt16,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(System.Int16,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt64,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt64,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is MSB, most significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt64,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt64,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt32,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt32,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt32,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            Byte indexing is LSB, least significant byte, at index/offset zero.
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt32,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            Byte indexing is LSB, least significant byte, at index/offset zero.
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerUInt16,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerUInt16,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.LittleEndianByteIndexerInt16,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBytesExtensions.StoreByte(Jcd.BitManipulation.ByteIndexers.BigEndianByteIndexerInt16,System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            Byte indexing is LSB, least significant byte, at index/offset zero.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.ToggleBitsExtensions">
            <summary>
            Extension methods to aid in toggling bits. 
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.SByte,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.Int16,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.Int32,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.Int64,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.Byte,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.UInt16,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.UInt32,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.UInt64,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask 
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
    </members>
</doc>
