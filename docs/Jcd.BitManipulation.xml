<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.BitManipulation</name>
    </assembly>
    <members>
        <member name="T:Jcd.BitManipulation.BitIndexerByte">
            <summary>
            Provides enumeration and indexed access to the bits on a stored byte. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexerByte.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerByte.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerByte.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerByte.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerByte.op_Implicit(System.Byte)~Jcd.BitManipulation.BitIndexerByte">
            <summary>
            Automatically Convert from a byte to a BitIndexerByte
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerByte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerByte.op_Implicit(Jcd.BitManipulation.BitIndexerByte)~System.Byte">
            <summary>
            Automatically convert from a BitIndexerByte to a byte
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerByte.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerByte.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerByte.Slice(System.Int32,System.Int32)">
            <summary>
            Gets a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerByte.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexerExtensions">
            <summary>
            Some helper methods for converting to and from a BitIndexer.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToBitIndexer(System.Byte)">
            <summary>
            Returns a BitIndexer for a byte
            </summary>
            <param name="data">the data to convert</param>
            <returns>A BitIndexerByte with a copy of the original data</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToBitIndexer(System.SByte)">
            <summary>
            Returns a BitIndexer for an sbyte
            </summary>
            <param name="data">the data to convert</param>
            <returns>A BitIndexerSByte with a copy of the original data</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToBitIndexer(System.Int16)">
            <summary>
            Returns a BitIndexer for a short
            </summary>
            <param name="data">the data to convert</param>
            <returns>A BitIndexerInt16 with a copy of the original data</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToBitIndexer(System.UInt16)">
            <summary>
            Returns a BitIndexer for a ushort
            </summary>
            <param name="data">the data to convert</param>
            <returns>A BitIndexerUInt16 with a copy of the original data</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToBitIndexer(System.Int32)">
            <summary>
            Returns a BitIndexer for an int
            </summary>
            <param name="data">the data to convert</param>
            <returns>A BitIndexerInt32 with a copy of the original data</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToBitIndexer(System.UInt32)">
            <summary>
            Returns a BitIndexer for a uint
            </summary>
            <param name="data">the data to convert</param>
            <returns>A BitIndexerUInt32 with a copy of the original data</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToBitIndexer(System.Int64)">
            <summary>
            Returns a BitIndexer for a long
            </summary>
            <param name="data">the data to convert</param>
            <returns>A BitIndexerInt64 with a copy of the original data</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToBitIndexer(System.UInt64)">
            <summary>
            Returns a BitIndexer for a ulong
            </summary>
            <param name="data">the data to convert</param>
            <returns>A BitIndexerUInt64 with a copy of the original data</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToByte(Jcd.BitManipulation.IBitIndexer)">
            <summary>
            Convert an IBitIndexer into a byte
            </summary>
            <param name="indexer">the indexer to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToSByte(Jcd.BitManipulation.IBitIndexer)">
            <summary>
            Convert an IBitIndexer into an sbyte
            </summary>
            <param name="indexer">the indexer to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToInt16(Jcd.BitManipulation.IBitIndexer)">
            <summary>
            Convert an IBitIndexer into a short
            </summary>
            <param name="indexer">the indexer to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToUInt16(Jcd.BitManipulation.IBitIndexer)">
            <summary>
            Convert an IBitIndexer into a ushort
            </summary>
            <param name="indexer">the indexer to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToInt32(Jcd.BitManipulation.IBitIndexer)">
            <summary>
            Convert an IBitIndexer into an int
            </summary>
            <param name="indexer">the indexer to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToUInt32(Jcd.BitManipulation.IBitIndexer)">
            <summary>
            Convert an IBitIndexer into a uint
            </summary>
            <param name="indexer">the indexer to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToInt64(Jcd.BitManipulation.IBitIndexer)">
            <summary>
            Convert an IBitIndexer into a long
            </summary>
            <param name="indexer">the indexer to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerExtensions.ToUInt64(Jcd.BitManipulation.IBitIndexer)">
            <summary>
            Convert an IBitIndexer into a ulong
            </summary>
            <param name="indexer">the indexer to convert</param>
            <returns>the converted value</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexerInt16">
            <summary>
            Provides enumeration and indexed access to the bits on a stored short. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexerInt16.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerInt16.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerInt16.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerInt16.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt16.op_Implicit(System.Int16)~Jcd.BitManipulation.BitIndexerInt16">
            <summary>
            Automatically Convert from a short to a BitIndexerInt16
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerInt16</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt16.op_Implicit(Jcd.BitManipulation.BitIndexerInt16)~System.Int16">
            <summary>
            Automatically convert from a BitIndexerInt16 to a short
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the short</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt16.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt16.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt16.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt16.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexerInt32">
            <summary>
            Provides enumeration and indexed access to the bits on a stored int. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexerInt32.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerInt32.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerInt32.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerInt32.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt32.op_Implicit(System.Int32)~Jcd.BitManipulation.BitIndexerInt32">
            <summary>
            Automatically Convert from an int to a BitIndexerInt32
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerInt32</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt32.op_Implicit(Jcd.BitManipulation.BitIndexerInt32)~System.Int32">
            <summary>
            Automatically convert from a BitIndexerInt32 to an int
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the int</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt32.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt32.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt32.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt32.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexerInt64">
            <summary>
            Provides enumeration and indexed access to the bits on a stored long. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexerInt64.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerInt64.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerInt64.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerInt64.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt64.op_Implicit(System.Int64)~Jcd.BitManipulation.BitIndexerInt64">
            <summary>
            Automatically Convert from a long to a BitIndexerInt64
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerInt64</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt64.op_Implicit(Jcd.BitManipulation.BitIndexerInt64)~System.Int64">
            <summary>
            Automatically convert from a BitIndexerInt64 to a long
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the long</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt64.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt64.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt64.Slice(System.Int32,System.Int32)">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerInt64.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexerSByte">
            <summary>
            Provides enumeration and indexed access to the bits on a stored sbyte. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexerSByte.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerSByte.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerSByte.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerSByte.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerSByte.op_Implicit(System.SByte)~Jcd.BitManipulation.BitIndexerSByte">
            <summary>
            Automatically Convert from an sbyte to a BitIndexerSByte
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerSByte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerSByte.op_Implicit(Jcd.BitManipulation.BitIndexerSByte)~System.SByte">
            <summary>
            Automatically convert from a BitIndexerSByte to an sbyte
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the sbyte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerSByte.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerSByte.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerSByte.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerSByte.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexerUInt16">
            <summary>
            Provides enumeration and indexed access to the bits on a stored ushort. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexerUInt16.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerUInt16.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerUInt16.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerUInt16.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt16.op_Implicit(System.UInt16)~Jcd.BitManipulation.BitIndexerUInt16">
            <summary>
            Automatically Convert from a ushort to a BitIndexerUInt16
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerUInt16</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt16.op_Implicit(Jcd.BitManipulation.BitIndexerUInt16)~System.UInt16">
            <summary>
            Automatically convert from a BitIndexerUInt16 to a ushort
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the ushort</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt16.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt16.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt16.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt16.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexerUInt32">
            <summary>
            Provides enumeration and indexed access to the bits on a stored uint. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexerUInt32.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerUInt32.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerUInt32.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerUInt32.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt32.op_Implicit(System.UInt32)~Jcd.BitManipulation.BitIndexerUInt32">
            <summary>
            Automatically Convert from a uint to a BitIndexerUInt32
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerUInt32</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt32.op_Implicit(Jcd.BitManipulation.BitIndexerUInt32)~System.UInt32">
            <summary>
            Automatically convert from a BitIndexerUInt32 to a uint
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the uint</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt32.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt32.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt32.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt32.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexerUInt64">
            <summary>
            Provides enumeration and indexed access to the bits on a stored ulong. 
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitIndexerUInt64.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerUInt64.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerUInt64.Length">
            <summary>
            The length of enumerated bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexerUInt64.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store. 
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt64.op_Implicit(System.UInt64)~Jcd.BitManipulation.BitIndexerUInt64">
            <summary>
            Automatically Convert from a ulong to a BitIndexerUInt64
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new BitIndexerUInt64</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt64.op_Implicit(Jcd.BitManipulation.BitIndexerUInt64)~System.UInt64">
            <summary>
            Automatically convert from a BitIndexerUInt64 to a ulong
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt64.GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt64.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get an enumerator to enumerate the bits with.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt64.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexerUInt64.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitMask">
            <summary>
            An abstraction and factory methods to aid in bit manipulation.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Bits">
            <summary>
            The backing store for the actual bits of the bitmask.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.CreateRange(System.Int32,System.Int32)">
            <summary>
            Create a 64 bit, bitmask of a specified bit size and bit location within the number.  
            </summary>
            <param name="offset">the lowest bit to start turning on</param>
            <param name="size">the number of bits to set to 1</param>
            <returns>the shifted mask</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.CreateSingleBit(System.Int32)">
            <summary>
            Create a 64 bit, single bit bitmask, given bit position.
            </summary>
            <param name="offset">the lowest bit to start turning on</param>
            <returns>the shifted mask</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(Jcd.BitManipulation.BitMask)">
            <summary>
            Copy constructor  
            </summary>
            <param name="mask">The BitMask to copy</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt64)">
            <summary>
            Create a bitmask  
            </summary>
            <param name="bits">The BitMask to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int64)">
            <summary>
            Create a bitmask  
            </summary>
            <param name="bits">The BitMask to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt32)">
            <summary>
            Create a bitmask  
            </summary>
            <param name="bits">The BitMask to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int32)">
            <summary>
            Create a bitmask  
            </summary>
            <param name="bits">The BitMask to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt16)">
            <summary>
            Create a bitmask  
            </summary>
            <param name="bits">The BitMask to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int16)">
            <summary>
            Create a bitmask  
            </summary>
            <param name="bits">The BitMask to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Byte)">
            <summary>
            Create a bitmask  
            </summary>
            <param name="bits">The BitMask to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.SByte)">
            <summary>
            Create a bitmask  
            </summary>
            <param name="bits">The BitMask to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the mask formatted as 0b0101...1111</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.SByte">
            <summary>
            Automatically convert to sbyte from a BitMask
            </summary>
            <param name="mask"></param>
            <returns>the lowest 8 bits of the mask as a signed byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Byte">
            <summary>
            Automatically convert to byte from a BitMask
            </summary>
            <param name="mask"></param>
            <returns>the lowest 8 bits of the mask as a byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int16">
            <summary>
            Automatically convert to short from a BitMask
            </summary>
            <param name="mask"></param>
            <returns>the lowest 16 bits of the mask as a short</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt16">
            <summary>
            Automatically convert to ushort from a BitMask
            </summary>
            <param name="mask"></param>
            <returns>the lowest 16 bits of the mask as a ushort</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int32">
            <summary>
            Automatically convert to int from a BitMask
            </summary>
            <param name="mask"></param>
            <returns>the lowest 32 bits of the mask as an int</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt32">
            <summary>
            Automatically convert to uint from a BitMask
            </summary>
            <param name="mask"></param>
            <returns>the lowest 32 bits of the mask as a uint</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int64">
            <summary>
            Automatically convert to long from a BitMask
            </summary>
            <param name="mask"></param>
            <returns>the bits of the mask as a long</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt64">
            <summary>
            Automatically convert to ulong from a BitMask
            </summary>
            <param name="mask"></param>
            <returns>the bits of the mask as a ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.SByte)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to BitMask from an sbyte
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the BitMask object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int16)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to BitMask from a byte
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the BitMask object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int32)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to BitMask from an int
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the BitMask object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int64)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to BitMask from a long
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the BitMask object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Byte)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to BitMask from a byte
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the BitMask object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt16)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to BitMask from a ushort
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the BitMask object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt32)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to BitMask from a uint
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the BitMask object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt64)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to BitMask from a ulong
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the BitMask object constructed from the bits</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BooleanArrayExtensions">
            <summary>
            A bunch of extension methods to help with converting numbers to and from arrays of bools
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.Byte)">
            <summary>
            Convert a byte into an array of bools
            </summary>
            <param name="bits">the byte to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.SByte)">
            <summary>
            Convert an sbyte into an array of bools
            </summary>
            <param name="bits">the sbyte to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.UInt16)">
            <summary>
            Convert a ushort into an array of bools
            </summary>
            <param name="bits">the bits of the ushort to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.Int16)">
            <summary>
            Convert a short into an array of bools
            </summary>
            <param name="bits">the short to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.UInt32)">
            <summary>
            Convert a uint into an array of bools
            </summary>
            <param name="bits">the uint to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.Int32)">
            <summary>
            Convert an int into an array of bools
            </summary>
            <param name="bits">the int to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.UInt64)">
            <summary>
            Convert a ulong into an array of bools
            </summary>
            <param name="bits">the ulong to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToBooleanArray(System.Int64)">
            <summary>
            Convert a long into an array of bools
            </summary>
            <param name="bits">the long to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToByte(System.Boolean[])">
            <summary>
            Converts an array of bools into a byte, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted byte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToSByte(System.Boolean[])">
            <summary>
            Converts an array of bools into an sbyte, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted sbyte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt16(System.Boolean[])">
            <summary>
            Converts an array of bools into a ushort, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted ushort</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt16(System.Boolean[])">
            <summary>
            Converts an array of bools into a short, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted short</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt32(System.Boolean[])">
            <summary>
            Converts an array of bools into a uint, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted uint</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt32(System.Boolean[])">
            <summary>
            Converts an array of bools into an int, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted int</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt64(System.Boolean[])">
            <summary>
            Converts an array of bools into a ulong, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt64(System.Boolean[])">
            <summary>
            Converts an array of bools into a long, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted long</returns>
        </member>
        <member name="T:Jcd.BitManipulation.ClearBitsExtensions">
            <summary>
            Extension methods to aid in clearing bits in various integer data types.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.SByte@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to begin clearing bits.</param>
            <param name="size">The number of bits to clear on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int16@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to begin clearing bits.</param>
            <param name="size">The number of bits to clear on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to begin clearing bits.</param>
            <param name="size">The number of bits to clear on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int64@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to begin clearing bits.</param>
            <param name="size">The number of bits to clear on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Byte@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to begin clearing bits.</param>
            <param name="size">The number of bits to clear on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt16@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to begin clearing bits.</param>
            <param name="size">The number of bits to clear on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt32@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to begin clearing bits.</param>
            <param name="size">The number of bits to clear on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt64@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to begin clearing bits.</param>
            <param name="size">The number of bits to clear on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.SByte@,System.Int32)">
            <summary>
            Sets bit to "off" in a variable, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.Int16@,System.Int32)">
            <summary>
            Sets bit to "off" in a variable, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.Int32@,System.Int32)">
            <summary>
            Sets bit to "off" in a variable, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.Int64@,System.Int32)">
            <summary>
            Sets bit to "off" in a variable, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.Byte@,System.Int32)">
            <summary>
            Sets bit to "off" in a variable, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.UInt16@,System.Int32)">
            <summary>
            Sets bit to "off" in a variable, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.UInt32@,System.Int32)">
            <summary>
            Sets bit to "off" in a variable, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBit(System.UInt64@,System.Int32)">
            <summary>
            Sets bit to "off" in a variable, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.SByte@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int16@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int32@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Int64@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.Byte@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt16@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt32@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to clear.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ClearBitsExtensions.ClearBits(System.UInt64@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" in a variable. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to clear.</param>
        </member>
        <member name="T:Jcd.BitManipulation.IBitIndexer">
            <summary>
            The basic interface for indexing bits within an integer data type.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.IBitIndexer.Length">
            <summary>
            The number of addressable bits
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.IBitIndexer.Item(System.Int32)">
            <summary>
            gets or sets a bit
            </summary>
            <param name="index">the offset of the bit to get or set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.IBitIndexer.Slice(System.Int32,System.Int32)">
            <summary>
            Gets a slice of bits from the backing store
            </summary>
            <param name="start">starting offset of the bits to retrieve</param>
            <param name="length">the number of bits to get</param>
            <returns>Array of bits extracted</returns>
        </member>
        <member name="M:Jcd.BitManipulation.IBitIndexer.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.ReadBitsExtensions">
            <summary>
            Extension methods that enable reading one or more bits from a specified offset in an integer data type. 
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.UInt16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Int16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.Byte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBits(System.SByte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset. 
            </summary>
            <param name="self">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.UInt64,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.Int64,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.UInt32,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.Int32,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.UInt16,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.Int16,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.Byte,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadBitsExtensions.ReadBit(System.SByte,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="T:Jcd.BitManipulation.SetBitsExtensions">
            <summary>
            Extension methods that aid in turning bits on in an integer data type.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.SByte@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int16@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int64@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Byte@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt16@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt32@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt64@,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.SByte@,System.Int32)">
            <summary>
            Sets specified bit to "on" in a variable
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to set to on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.Int16@,System.Int32)">
            <summary>
            Sets specified bit to "on" in a variable
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to set to on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.Int32@,System.Int32)">
            <summary>
            Sets specified bit to "on" in a variable
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to set to on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.Int64@,System.Int32)">
            <summary>
            Sets specified bit to "on" in a variable
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to set to on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.Byte@,System.Int32)">
            <summary>
            Sets specified bit to "on" in a variable
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to set to on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.UInt16@,System.Int32)">
            <summary>
            Sets specified bit to "on" in a variable
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to set to on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.UInt32@,System.Int32)">
            <summary>
            Sets specified bit to "on" in a variable
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to set to on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBit(System.UInt64@,System.Int32)">
            <summary>
            Sets specified bit to "on" in a variable
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to set to on.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.SByte@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int16@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int32@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Int64@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.Byte@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt16@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt32@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.SetBitsExtensions.SetBits(System.UInt64@,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on" in a variable 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="T:Jcd.BitManipulation.StoreBitsExtensions">
            <summary>
            Extension methods that aid in storing values into bit offsets within an integer data type.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.SByte@,System.SByte,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="value">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int16@,System.Int16,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="value">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="value">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int64@,System.Int64,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="value">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Byte@,System.Byte,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="value">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt16@,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="value">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt32@,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="value">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt64@,System.UInt64,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="value">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt64@,System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="self">the destination for the stored bits</param>
            <param name="value">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int64@,System.Int64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="self">the destination for the stored bits</param>
            <param name="value">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt32@,System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="self">the destination for the stored bits</param>
            <param name="value">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int32@,System.Int32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="self">the destination for the stored bits</param>
            <param name="value">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.UInt16@,System.UInt16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="self">the destination for the stored bits</param>
            <param name="value">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Int16@,System.Int16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="self">the destination for the stored bits</param>
            <param name="value">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.Byte@,System.Byte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="self">the destination for the stored bits</param>
            <param name="value">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBits(System.SByte@,System.SByte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="self">the destination for the stored bits</param>
            <param name="value">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.UInt64@,System.Int32,System.Boolean)">
            <summary>
            Store a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <param name="bit">The bit value to set</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.Int64@,System.Int32,System.Boolean)">
            <summary>
            Store a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <param name="bit">The bit value to set</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.UInt32@,System.Int32,System.Boolean)">
            <summary>
            Store a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <param name="bit">The bit value to set</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.Int32@,System.Int32,System.Boolean)">
            <summary>
            Store a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <param name="bit">The bit value to set</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.UInt16@,System.Int32,System.Boolean)">
            <summary>
            Store a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <param name="bit">The bit value to set</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.Int16@,System.Int32,System.Boolean)">
            <summary>
            Store a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <param name="bit">The bit value to set</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            Store a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <param name="bit">The bit value to set</param>
        </member>
        <member name="M:Jcd.BitManipulation.StoreBitsExtensions.StoreBit(System.SByte@,System.Int32,System.Boolean)">
            <summary>
            Store a single bit from the specified offset.
            </summary>
            <param name="self">the bits to read from</param>
            <param name="offset">the offset to read</param>
            <param name="bit">The bit value to set</param>
        </member>
        <member name="T:Jcd.BitManipulation.ToggleBitsExtensions">
            <summary>
            Extension methods to aid in toggling bits. 
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.SByte@,System.Int32,System.Int32)">
            <summary>
            Toggles bits in a variable, given a bit position and size.
            The default values result in toggling all bits. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int16@,System.Int32,System.Int32)">
            <summary>
            Toggles bits in a variable, given a bit position and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Toggles bits in a variable, given a bit position and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int64@,System.Int32,System.Int32)">
            <summary>
            Toggles bits in a variable, given a bit position and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Byte@,System.Int32,System.Int32)">
            <summary>
            Toggles bits in a variable, given a bit position and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt16@,System.Int32,System.Int32)">
            <summary>
            Toggles bits in a variable, given a bit position and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt32@,System.Int32,System.Int32)">
            <summary>
            Toggles bits in a variable, given a bit position and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt64@,System.Int32,System.Int32)">
            <summary>
            Toggles bits in a variable, given a bit position and size. 
            The default values result in toggling all bits. 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.SByte@,System.Int32)">
            <summary>
            Toggles a bit, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.Int16@,System.Int32)">
            <summary>
            Toggles a bit, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.Int32@,System.Int32)">
            <summary>
            Toggles a bit, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.Int64@,System.Int32)">
            <summary>
            Toggles a bit, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.Byte@,System.Int32)">
            <summary>
            Toggles a bit, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.UInt16@,System.Int32)">
            <summary>
            Toggles a bit, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.UInt32@,System.Int32)">
            <summary>
            Toggles a bit, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBit(System.UInt64@,System.Int32)">
            <summary>
            Toggles a bit, given a bit position.
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.SByte@,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits in a variable according to the provided mask 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int16@,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits in a variable according to the provided mask 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int32@,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits in a variable according to the provided mask 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Int64@,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits in a variable according to the provided mask 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.Byte@,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits in a variable according to the provided mask 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt16@,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits in a variable according to the provided mask 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt32@,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits in a variable according to the provided mask 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
        <member name="M:Jcd.BitManipulation.ToggleBitsExtensions.ToggleBits(System.UInt64@,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits in a variable according to the provided mask 
            </summary>
            <param name="self">The value to be modified.</param>
            <param name="mask">bits to set.</param>
        </member>
    </members>
</doc>
