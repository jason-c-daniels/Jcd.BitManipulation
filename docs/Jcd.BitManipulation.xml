<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.BitManipulation</name>
    </assembly>
    <members>
        <member name="T:Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.UInt64" />. Zero is the most significant byte.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.UInt64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from a <see cref="T:System.UInt64" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Int64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from an <see cref="T:System.Int64" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.UInt32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from a <see cref="T:System.UInt32" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Int32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from an <see cref="T:System.Int32" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.UInt16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from a <see cref="T:System.UInt16" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Int16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from an <see cref="T:System.Int16" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Byte)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from a <see cref="T:System.Byte" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.SByte)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from an <see cref="T:System.SByte" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Single)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from an <see cref="T:System.Single" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.Double)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from an <see cref="T:System.Double" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.#ctor(System.UInt64,System.Int32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> from a <see cref="T:System.UInt64" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
            <param name="byteSize">The number of bytes to index</param>
        </member>
        <member name="P:Jcd.BitManipulation.BigEndianByteIndexer.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BigEndianByteIndexer.Length">
            <summary>
            The number of bytes indexable by this indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BigEndianByteIndexer.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BigEndianByteIndexer.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.UInt64">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data as a <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Int64">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.UInt32">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Int32">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.UInt16">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Int16">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Byte">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.SByte">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Single">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to a <see cref="T:System.Single" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Double">
            <summary>
            Implicitly converts the byte indexer to its underlying data type.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Explicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.Byte[]">
            <summary>
            Explicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to an array of bytes.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data converted to an array, serialized as big endian.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Explicit(Jcd.BitManipulation.BigEndianByteIndexer)~System.ReadOnlySpan{System.Byte}">
            <summary>
            Explicitly converts the <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" /> to an array of bytes.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data converted to an array, serialized as big endian.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.UInt64)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.UInt64" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Int64)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts an <see cref="T:System.Int64" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.UInt32)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.UInt32" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Int32)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Int32" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.UInt16)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.UInt16" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Int16)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Int16" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Byte)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Byte" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.SByte)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts an <see cref="T:System.SByte" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Single)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Single" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Implicit(System.Double)~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Double" /> to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Explicit(System.Byte[])~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Explicitly converts an array of  bytes to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.op_Explicit(System.ReadOnlySpan{System.Byte})~Jcd.BitManipulation.BigEndianByteIndexer">
            <summary>
            Explicitly converts an array of  bytes to a <see cref="T:Jcd.BitManipulation.BigEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.StoreBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.StoreBytes(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.StoreByte(System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BigEndianByteIndexer.ToString">
            <summary>
            Creates a string of the data formatted as hex for the bytes in big endian notation
            </summary>
            <returns>a string of the data formatted as hex bytes</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitIndexer">
            <summary>
            Provides enumeration and indexed access to the bits on a stored <see cref="T:System.UInt64" />.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexer.BitSize">
            <summary>
            The number of bits this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexer.Bits">
            <summary>
            The backing store
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexer.Length">
            <summary>
            The number of bits indexable by this indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.BitIndexer.Item(System.Int32)">
            <summary>
            Gets or sets individual bits within the backing store.
            </summary>
            <param name="index">the offset of the bit to access.</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bits given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bools for the subset of bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Double)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.UInt64" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Double">
            <summary>
            Automatically convert from a BitIndexer to a <see cref="T:System.UInt64" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the bits converted to a <see cref="T:System.UInt64" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Single)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.UInt64" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Single">
            <summary>
            Automatically convert from a BitIndexer to a <see cref="T:System.UInt64" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the bits converted to a <see cref="T:System.UInt64" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.UInt64)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.UInt64" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.UInt64">
            <summary>
            Automatically convert from a BitIndexer to a <see cref="T:System.UInt64" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the bits converted to a <see cref="T:System.UInt64" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Int64)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.Int64" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Int64">
            <summary>
            Automatically convert from a BitIndexer to a <see cref="T:System.Int64" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the bits converted to a <see cref="T:System.Int64" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.UInt32)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.UInt32" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.UInt32">
            <summary>
            Automatically convert from a BitIndexer to a <see cref="T:System.UInt32" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the lower 32 bits converted to a <see cref="T:System.UInt32" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Int32)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.Int32" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Int32">
            <summary>
            Automatically convert from a BitIndexer to a <see cref="T:System.Int32" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the lower 32 bits converted to a <see cref="T:System.Int32" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.UInt16)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.UInt16" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.UInt16">
            <summary>
            Automatically convert from a BitIndexer to a <see cref="T:System.UInt16" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the lower 16 bits converted to a <see cref="T:System.UInt16" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Int16)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.Int16" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Int16">
            <summary>
            Automatically convert from a <see cref="T:Jcd.BitManipulation.BitIndexer" /> to a <see cref="T:System.Int16" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the lower 16 bits converted to a <see cref="T:System.Int16" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.SByte)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.SByte" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.SByte">
            <summary>
            Automatically convert from a <see cref="T:Jcd.BitManipulation.BitIndexer" /> to an <see cref="T:System.SByte" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the lower 8 bits converted to an <see cref="T:System.SByte" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Byte)~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically Convert from a <see cref="T:System.Byte" /> to a <see cref="T:Jcd.BitManipulation.BitIndexer" />
            </summary>
            <param name="bits">the initial value for the indexer's backing store</param>
            <returns>A new <see cref="T:Jcd.BitManipulation.BitIndexer" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Byte">
            <summary>
            Automatically convert from a <see cref="T:Jcd.BitManipulation.BitIndexer" /> to a <see cref="T:System.Byte" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>the lower 8 bits converted to a <see cref="T:System.Byte" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(Jcd.BitManipulation.BitIndexer)~System.Boolean[]">
            <summary>
            Automatically convert from a <see cref="T:Jcd.BitManipulation.BitIndexer" /> to an array of <see cref="T:System.Boolean" />
            </summary>
            <param name="indexer">the indexer to convert from</param>
            <returns>An array of bools for each bit with Least Significant Bit at index 0.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.op_Implicit(System.Boolean[])~Jcd.BitManipulation.BitIndexer">
            <summary>
            Automatically convert from a <see cref="T:Jcd.BitManipulation.BitIndexer" /> to an array of <see cref="T:System.Boolean" />
            </summary>
            <param name="array">the indexer to convert from</param>
            <returns>the lower 8 bits converted to a <see cref="T:System.Byte" /> </returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitIndexer.ToString">
            <summary>
            Format as a bit representation
            </summary>
            <returns>the bits of the value formatted as 0b0101...1111</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BitMask">
            <summary>
            An conceptual abstraction for a bit mask.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.AllBits">
            <summary>
            A default bitmask signifying all bits have been set.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Byte">
            <summary>
            A bitmask for the first byte in a number.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Byte1">
            <summary>
            A bitmask for the second byte in a number.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Byte2">
            <summary>
            A bitmask for the third byte in a number.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Byte3">
            <summary>
            A bitmask for the fourth byte in a number.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Byte4">
            <summary>
            A bitmask for the fifth byte in a number.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Byte5">
            <summary>
            A bitmask for the sixth byte in a number.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Byte6">
            <summary>
            A bitmask for the seventh byte in a number.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Byte7">
            <summary>
            A bitmask for the seventh byte in a number.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.BitMask.Bits">
            <summary>
            The backing store for the actual bits of the <see cref="T:Jcd.BitManipulation.BitMask" />.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.FromRange(System.Int32,System.Int32)">
            <summary>
            Create a 64 bit <see cref="T:Jcd.BitManipulation.BitMask" /> with a range of bits set.
            </summary>
            <param name="offset">the lowest bit to start turning on</param>
            <param name="size">the number of bits to set to 1</param>
            <returns>the shifted mask</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.FromSingleBit(System.Int32)">
            <summary>
            Create a 64 bit bit <see cref="T:Jcd.BitManipulation.BitMask" /> with a single bit set.
            </summary>
            <param name="offset">the bit to set</param>
            <returns>a <see cref="T:Jcd.BitManipulation.BitMask" /> with the specified bit set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(Jcd.BitManipulation.BitMask)">
            <summary>
            Copies an existing <see cref="T:Jcd.BitManipulation.BitMask" />
            </summary>
            <param name="mask">The <see cref="T:Jcd.BitManipulation.BitMask" /> to copy</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.UInt64" />
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask" /> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.Int64" />
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask" /> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.UInt32" />
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask" /> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask" /> from an <see cref="T:System.Int32" />
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask" /> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.UInt16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.UInt16" />
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask" /> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Int16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.Int16" />
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask" /> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.Byte)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.Byte" />
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask" /> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.#ctor(System.SByte)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.BitMask" /> from an <see cref="T:System.SByte" />
            </summary>
            <param name="bits">The <see cref="T:Jcd.BitManipulation.BitMask" /> to use</param>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.ToString">
            <summary>
            Formats the <see cref="T:Jcd.BitManipulation.BitMask" /> as a "0b" prefixed string of zeroes and ones.
            </summary>
            <returns>the bits of the mask formatted as 0b0101...1111</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.SByte">
            <summary>
            Automatically convert to <see cref="T:System.SByte" /> from a <see cref="T:Jcd.BitManipulation.BitMask" />
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask" /> to convert from.</param>
            <returns>the lowest 8 bits of the mask as an <see cref="T:System.SByte" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Byte">
            <summary>
            Automatically convert to <see cref="T:System.Byte" /> from a <see cref="T:Jcd.BitManipulation.BitMask" />
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask" /> to convert from.</param>
            <returns>the lowest 8 bits of the mask as a <see cref="T:System.Byte" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int16">
            <summary>
            Automatically convert to <see cref="T:System.Int16" /> from a <see cref="T:Jcd.BitManipulation.BitMask" />
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask" /> to convert from.</param>
            <returns>the lowest 16 bits of the mask as a <see cref="T:System.Int16" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt16">
            <summary>
            Automatically convert to <see cref="T:System.UInt16" /> from a <see cref="T:Jcd.BitManipulation.BitMask" />
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask" /> to convert from.</param>
            <returns>the lowest 16 bits of the mask as a <see cref="T:System.UInt16" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int32">
            <summary>
            Automatically convert to <see cref="T:System.Int32" /> from a <see cref="T:Jcd.BitManipulation.BitMask" />
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask" /> to convert from.</param>
            <returns>the lowest 32 bits of the mask as an int</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt32">
            <summary>
            Automatically convert to <see cref="T:System.UInt32" /> from a <see cref="T:Jcd.BitManipulation.BitMask" />
            </summary>
            <param name="mask"></param>
            <returns>the lowest 32 bits of the mask as a uint</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.Int64">
            <summary>
            Automatically convert to <see cref="T:System.Int64" /> from a <see cref="T:Jcd.BitManipulation.BitMask" />
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask" /> to convert from.</param>
            <returns>the bits of the mask as a <see cref="T:System.Int64" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(Jcd.BitManipulation.BitMask)~System.UInt64">
            <summary>
            Automatically convert to <see cref="T:System.UInt64" /> from a <see cref="T:Jcd.BitManipulation.BitMask" />
            </summary>
            <param name="mask">the <see cref="T:Jcd.BitManipulation.BitMask" /> to convert from.</param>
            <returns>the bits of the mask as a <see cref="T:System.UInt64" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.SByte)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask" /> from an <see cref="T:System.SByte" />
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask" /></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask" /> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int16)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.Byte" />
            </summary>
            <param name="bits">the value to convert to a BitMask</param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask" /> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int32)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask" /> from an <see cref="T:System.Int32" />
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask" /></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask" /> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Int64)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.Int64" />
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask" /></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask" /> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.Byte)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.Byte" />
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask" /></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask" /> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt16)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.UInt16" />
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask" /></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask" /> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt32)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.UInt32" />
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask" /></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask" /> object constructed from the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BitMask.op_Implicit(System.UInt64)~Jcd.BitManipulation.BitMask">
            <summary>
            Automatically convert to <see cref="T:Jcd.BitManipulation.BitMask" /> from a <see cref="T:System.UInt64" />
            </summary>
            <param name="bits">the value to convert to a <see cref="T:Jcd.BitManipulation.BitMask" /></param>
            <returns>the <see cref="T:Jcd.BitManipulation.BitMask" /> object constructed from the bits</returns>
        </member>
        <member name="T:Jcd.BitManipulation.BooleanArrayExtensions">
            <summary>
            Extension methods to aid in converting to numbers from arrays of bools
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToByte(System.Boolean[])">
            <summary>
            Converts an array of bools into a <see cref="T:System.Byte" />, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, Least Significant Bit at index 0</param>
            <returns>The converted <see cref="T:System.Byte" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToSByte(System.Boolean[])">
            <summary>
            Converts an array of bools into an <see cref="T:System.SByte" />, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, Least Significant Bit at index 0</param>
            <returns>The converted <see cref="T:System.SByte" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt16(System.Boolean[])">
            <summary>
            Converts an array of bools into a <see cref="T:System.UInt16" />, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, Least Significant Bit at index 0</param>
            <returns>The converted <see cref="T:System.UInt16" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt16(System.Boolean[])">
            <summary>
            Converts an array of bools into a <see cref="T:System.Int16" />, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, Least Significant Bit at index 0</param>
            <returns>The converted <see cref="T:System.Int16" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt32(System.Boolean[])">
            <summary>
            Converts an array of bools into a <see cref="T:System.UInt32" />, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, Least Significant Bit at index 0</param>
            <returns>The converted <see cref="T:System.UInt32" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt32(System.Boolean[])">
            <summary>
            Converts an array of bools into an <see cref="T:System.Int32" />, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, Least Significant Bit at index 0</param>
            <returns>The converted <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToUInt64(System.Boolean[])">
            <summary>
            Converts an array of bools into a <see cref="T:System.UInt64" />, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, Least Significant Bit at index 0</param>
            <returns>The converted <see cref="T:System.UInt64" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToInt64(System.Boolean[])">
            <summary>
            Converts an array of bools into a <see cref="T:System.Int64" />, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, Least Significant Bit at index 0</param>
            <returns>The converted <see cref="T:System.Int64" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToDouble(System.Boolean[])">
            <summary>
            Converts an array of bools into a double, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted double</returns>
        </member>
        <member name="M:Jcd.BitManipulation.BooleanArrayExtensions.ToSingle(System.Boolean[])">
            <summary>
            Converts an array of bools into a float, discarding any excess bits.
            </summary>
            <param name="bits">the array of bools to convert, LSB at index 0</param>
            <returns>The converted float</returns>
        </member>
        <member name="T:Jcd.BitManipulation.ByteArrayExtensions">
            <summary>
            Extension methods to aid in converting numbers to and from arrays of bools
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToByte(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.Byte" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.Byte" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToSByte(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into an <see cref="T:System.SByte" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted sbyte</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt16(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.UInt16" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.UInt16" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt16(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.Int16" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.Int16" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt32(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.UInt32" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.UInt32" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt32(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into an <see cref="T:System.UInt32" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.UInt32" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToUInt64(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.UInt64" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.UInt64" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToInt64(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.Int64" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.Int64" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToDouble(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a double, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteArrayExtensions.ToSingle(System.Byte[],Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a double, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted ulong</returns>
        </member>
        <member name="T:Jcd.BitManipulation.ByteExtensions">
            <summary>
            Provides methods to perform easy to read bit manipulations on a single <see cref="T:System.Byte" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.AreAllBitsSet(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.Byte" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.AreAnyBitsSet(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.Byte" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.AreNoBitsSet(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.Byte" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ToBooleanArray(System.Byte)">
            <summary>
            Convert a <see cref="T:System.Byte" /> into an array of bools
            </summary>
            <param name="bits">the byte to convert</param>
            <returns>the array. Least Significant Bit at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ToByteArray(System.Byte)">
            <summary>
            Convert a <see cref="T:System.Byte" /> into an array of bytes
            </summary>
            <param name="data">the <see cref="T:System.Byte" /> to convert</param>
            <returns>an array containing the <see cref="T:System.Byte" />.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ClearBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ClearBit(System.Byte,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ClearBits(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ReadBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ReadBits(System.Byte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ReadBit(System.Byte,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.SetBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.SetBit(System.Byte,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.SetBits(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.StoreBits(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.StoreBits(System.Byte,System.Byte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.StoreBit(System.Byte,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ToggleBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ToggleBit(System.Byte,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ByteExtensions.ToggleBits(System.Byte,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.DoubleExtensions">
            <summary>
            Provides methods to perform easy to read bit and byte manipulations on a <see cref="T:System.Double" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.AreAllBitsSet(System.Double,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.Double" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.AreAnyBitsSet(System.Double,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on an <see cref="T:System.Double" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.AreNoBitsSet(System.Double,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on an <see cref="T:System.Double" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.BitwiseToUInt64(System.Double)">
            <summary>
            Converts a <see cref="T:System.Double" /> to the bit-wise identical <see cref="T:System.UInt64" />
            </summary>
            <param name="value">The value to convert</param>
            <returns>the <see cref="T:System.UInt64" /> representation of the underlying bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.BitwiseToInt64(System.Double)">
            <summary>
            Converts a <see cref="T:System.Double" /> to the bit-wise identical <see cref="T:System.Int64" />
            </summary>
            <param name="value">The value to convert</param>
            <returns>the <see cref="T:System.Int64" /> representation of the underlying bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ToBooleanArray(System.Double)">
            <summary>
            Convert a long into an array of bools
            </summary>
            <param name="bits">the long to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ToByteArray(System.Double,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a double into an array of bytes
            </summary>
            <param name="data">the long to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ClearBits(System.Double,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ClearBit(System.Double,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ClearBits(System.Double,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ReadBits(System.Double,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ReadBits(System.Double,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ReadBit(System.Double,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ReadBytes(System.Double,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ReadByte(System.Double,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.SetBits(System.Double,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.SetBit(System.Double,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.SetBits(System.Double,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.StoreBits(System.Double,System.UInt64,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.StoreBits(System.Double,System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.StoreBit(System.Double,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.StoreBytes(System.Double,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.StoreBytes(System.Double,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.StoreByte(System.Double,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ToggleBits(System.Double,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ToggleBit(System.Double,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.DoubleExtensions.ToggleBits(System.Double,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.Endian">
            <summary>
            A type indicating which endian is in use.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.Endian.Little">
            <summary>
            Indicates that Little Endian is in use.
            </summary>
        </member>
        <member name="F:Jcd.BitManipulation.Endian.Big">
            <summary>
            Indicates that Big Endian is in use.
            </summary>
        </member>
        <member name="T:Jcd.BitManipulation.Int16Extensions">
            <summary>
            Provides methods to perform easy to read bit and byte manipulations on an <see cref="T:System.Int16" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.AreAllBitsSet(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.Int16" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.AreAnyBitsSet(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.Int16" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.AreNoBitsSet(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.Int16" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ToBooleanArray(System.Int16)">
            <summary>
            Convert a <see cref="T:System.Int16" /> into an array of bools
            </summary>
            <param name="bits">the <see cref="T:System.Int16" /> to convert</param>
            <returns>the array. Least Significant Bit at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ToByteArray(System.Int16,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a <see cref="T:System.Int16" /> into an array of bytes
            </summary>
            <param name="data">the <see cref="T:System.Int16" /> to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ClearBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ClearBit(System.Int16,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ClearBits(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ReadBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ReadBits(System.Int16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ReadBit(System.Int16,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ReadBytes(System.Int16,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified offset within the value.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The offset to read the bytes from.</param>
            <param name="size">The size of the value in bytes.</param>
            <param name="endian">The endianness of the indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ReadByte(System.Int16,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.SetBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.SetBit(System.Int16,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.SetBits(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.StoreBits(System.Int16,System.Int16,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.StoreBits(System.Int16,System.Int16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.StoreBit(System.Int16,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.StoreBytes(System.Int16,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.StoreBytes(System.Int16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.StoreByte(System.Int16,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness for indexing into the bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ToggleBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ToggleBit(System.Int16,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int16Extensions.ToggleBits(System.Int16,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.Int32Extensions">
            <summary>
            Provides methods to perform easy to read bit and byte manipulations on an <see cref="T:System.Int32" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.AreAllBitsSet(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on an <see cref="T:System.Int32" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.AreAnyBitsSet(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on an <see cref="T:System.Int32" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.AreNoBitsSet(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on an <see cref="T:System.Int32" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.BitwiseToSingle(System.Int32)">
            <summary>
            Converts a <see cref="T:System.Int32" /> to the bit-wise identical <see cref="T:System.Single" />
            </summary>
            <param name="value">The value to convert</param>
            <returns>the <see cref="T:System.Single" /> representation of the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ToBooleanArray(System.Int32)">
            <summary>
            Convert an int into an array of bools
            </summary>
            <param name="bits">the <see cref="T:System.UInt32" /> to convert</param>
            <returns>the array. Least Significant Bit at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ToByteArray(System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Convert an int into an array of bytes
            </summary>
            <param name="data">the <see cref="T:System.Int32" /> to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ClearBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ClearBit(System.Int32,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ClearBits(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ReadBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ReadBits(System.Int32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ReadBit(System.Int32,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ReadBytes(System.Int32,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The offset to read the bytes from.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the indexing.</param>
            <returns>A byte array of the value in the specified endian.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ReadByte(System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.SetBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.SetBit(System.Int32,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.SetBits(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.StoreBits(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.StoreBits(System.Int32,System.Int32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.StoreBit(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.StoreBytes(System.Int32,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.StoreBytes(System.Int32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.StoreByte(System.Int32,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness for indexing into the bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ToggleBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ToggleBit(System.Int32,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int32Extensions.ToggleBits(System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.Int64Extensions">
            <summary>
            Provides methods to perform easy to read bit and byte manipulations on an <see cref="T:System.Int64" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.AreAllBitsSet(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.Int64" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.AreAnyBitsSet(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.Int64" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.AreNoBitsSet(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.Int64" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.BitwiseToDouble(System.Int64)">
            <summary>
            Converts a <see cref="T:System.Int64" /> to the bit-wise identical <see cref="T:System.Double" />
            </summary>
            <param name="value">The value to convert</param>
            <returns>the <see cref="T:System.Double" /> representation of the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ToBooleanArray(System.Int64)">
            <summary>
            Convert a <see cref="T:System.Int64" /> into an array of bools
            </summary>
            <param name="bits">the <see cref="T:System.Int64" /> to convert</param>
            <returns>the array. Least Significant Bit at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ToByteArray(System.Int64,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a <see cref="T:System.Int64" /> into an array of bytes
            </summary>
            <param name="data">the <see cref="T:System.Int64" /> to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ClearBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ClearBit(System.Int64,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ClearBits(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ReadBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ReadBits(System.Int64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ReadBit(System.Int64,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ReadBytes(System.Int64,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The offset to read the bytes from.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ReadByte(System.Int64,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.SetBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.SetBit(System.Int64,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.SetBits(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.StoreBits(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.StoreBits(System.Int64,System.Int64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.StoreBit(System.Int64,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.StoreBytes(System.Int64,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.StoreBytes(System.Int64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.StoreByte(System.Int64,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness for indexing into the bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ToggleBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ToggleBit(System.Int64,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.Int64Extensions.ToggleBits(System.Int64,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Provides byte level indexing operations (set, get) on a <see cref="T:System.UInt64" />. Zero is the most significant byte.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.UInt64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from a <see cref="T:System.UInt64" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Int64)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from an <see cref="T:System.Int64" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.UInt32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from a <see cref="T:System.UInt32" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Int32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from an <see cref="T:System.Int32" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.UInt16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from a <see cref="T:System.UInt16" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Int16)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from an <see cref="T:System.Int16" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Byte)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from a <see cref="T:System.Byte" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.SByte)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from an <see cref="T:System.SByte" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Single)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from an <see cref="T:System.Single" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.Double)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from an <see cref="T:System.Double" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.#ctor(System.UInt64,System.Int32)">
            <summary>
            Constructs a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> from a <see cref="T:System.UInt64" />.
            </summary>
            <param name="data"> The initial value of the underlying data.</param>
            <param name="byteSize">The number of bytes to index</param>
        </member>
        <member name="P:Jcd.BitManipulation.LittleEndianByteIndexer.ByteSize">
            <summary>
            The number of bytes this type will index
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.LittleEndianByteIndexer.Length">
            <summary>
            The number of bytes indexable by this indexer.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.LittleEndianByteIndexer.Data">
            <summary>
            The backing store.
            </summary>
        </member>
        <member name="P:Jcd.BitManipulation.LittleEndianByteIndexer.Item(System.Int32)">
            <summary>
            Access bytes from the underlying data.
            </summary>
            <param name="index">The index of the byte to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When index &lt; 0 or gt;= Length</exception>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.Slice(System.Int32,System.Int32)">
            <summary>
            Get a subset of bytes given a starting offset and length.
            </summary>
            <param name="start">The starting bit offset</param>
            <param name="length">The number of bits to extract</param>
            <returns>an array of bytes for the specified subset</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.UInt64">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data as a <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Int64">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.UInt32">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Int32">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.UInt16">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Int16">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Byte">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.SByte">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to a <see cref="T:System.UInt64" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Single">
            <summary>
            Implicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to a <see cref="T:System.Single" />.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Double">
            <summary>
            Implicitly converts the byte indexer to its underlying data type.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Explicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.Byte[]">
            <summary>
            Explicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to an array of bytes.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data converted to an array, serialized as big endian.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Explicit(Jcd.BitManipulation.LittleEndianByteIndexer)~System.ReadOnlySpan{System.Byte}">
            <summary>
            Explicitly converts the <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" /> to an array of bytes.
            </summary>
            <param name="indexer">The indexer to convert.</param>
            <returns>The raw data converted to an array, serialized as big endian.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.UInt64)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.UInt64" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Int64)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts an <see cref="T:System.Int64" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.UInt32)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.UInt32" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Int32)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Int32" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.UInt16)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.UInt16" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Int16)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Int16" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Byte)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Byte" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.SByte)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts an <see cref="T:System.SByte" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Single)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Single" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Implicit(System.Double)~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Implicitly converts a <see cref="T:System.Double" /> to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Explicit(System.Byte[])~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Explicitly converts an array of  bytes to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.op_Explicit(System.ReadOnlySpan{System.Byte})~Jcd.BitManipulation.LittleEndianByteIndexer">
            <summary>
            Explicitly converts an array of  bytes to a <see cref="T:Jcd.BitManipulation.LittleEndianByteIndexer" />.
            </summary>
            <param name="data">The underlying data type.</param>
            <returns>A indexer type.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.StoreBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.StoreBytes(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the indexer.
            </summary>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source to store. -1 means all bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.StoreByte(System.Byte,System.Int32)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.LittleEndianByteIndexer.ToString">
            <summary>
            Creates a string of the data formatted as hex for the bytes in big endian notation
            </summary>
            <returns>a string of the data formatted as hex bytes</returns>
        </member>
        <member name="T:Jcd.BitManipulation.NamespaceDoc">
            <summary>
            Provides a set of extension methods and types to assist with
            making bit manipulation code easier to read.
            </summary>
            <example>
            <code>
            ushort data = 0b0000000000000000;
            
            // turn on all the bits
            data = data.SetBits(0, 16); // value is now 0b1111111111111111
            
            // this is the equivalent as above
            data = data.SetBits();
            
            // Clear the middle 4 bits.
            data = data.ClearBits(4, 8); // value is now 0b1111000000001111
            
            // Toggle all the bits.
            data = data.ToggleBits(); // value is now 0b0000111111110000
            
            var finalData = data;
            // read the upper byte
            var upperByte = (byte) data.ReadBits(8, 8); // upperByte is now 0b00001111
            
            // write 0b1011 into the upper nybble
            upperByte = upperByte.StoreBits(0b1011, 4, 4); // upperByte is now 0b10111111
            
            // chaining operations, the same steps and end results
            data.ClearBits();
            data = data.SetBits(0, 16)  // value is now 0b1111111111111111
            ///      .SetBits()///  // this is the equivalent as above
            ///      .ClearBits(4, 8) // value is now 0b1111000000001111
            ///      .ToggleBits();   // value is now 0b0000111111110000
            
            upperByte = ((byte) data.ReadBits(8, 8)) // extract the upper byte (0b00001111)
              .StoreBits(0b1011, 4, 4);/// ///   // store the value in the upper 4 bits, now upperByte is now 0b10111111
            
            // finalData 0b0000111111110000
            var beByte0     = finalData.ReadByte(0, Endian.Big);/// ///   // 00001111
            var leByte0     = finalData.ReadByte(0, Endian.Little);///      // 11110000
            
            var mutatedData = finalData
            /// ///      .StoreByte(0b10111111, 0, Endian.Big)
            /// ///      .StoreByte(0b01010101, 0, Endian.Little ); // lower byte is now 0b01010101
            ;/// /// /// /// /// /// /// /// /// ///     // mutatedData is now 0b1011111101010101
            
            var beBa = mutatedData.ToByteArray(Endian.Big); // beBa=[0b10111111, 0b01010101]
            
            var leBa = mutatedData.ToByteArray(Endian.Little); // leBa=[0b01010101, 0b10111111]
            
            var leBaToUInt16Le = leBa.ToUInt16(Endian.Little); // leBaToUInt16Le = 0b1011111101010101
            
            var leBaToUInt16Be = leBa.ToUInt16(Endian.Big); // leBaToUInt16Le = 0b0101010110111111
            </code>
            </example>
        </member>
        <member name="T:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions">
            <summary>
            Provides facilities to convert <see cref="T:System.ReadOnlySpan`1" /> of bytes to other data types.
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToByte(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.Byte" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.Byte" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToSByte(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into an <see cref="T:System.SByte" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.SByte" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToUInt16(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.UInt16" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.UInt16" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToInt16(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.Int16" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.Int16" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToUInt32(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.UInt32" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.UInt32" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToInt32(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into an <see cref="T:System.Int32" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToUInt64(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.UInt64" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.UInt64" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToInt64(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a <see cref="T:System.Int64" />, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">The endian for the bytes.</param>
            <returns>The converted <see cref="T:System.Int64" /></returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToDouble(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a double, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted ulong</returns>
        </member>
        <member name="M:Jcd.BitManipulation.ReadOnlySpanOfByteExtensions.ToSingle(System.ReadOnlySpan{System.Byte},Jcd.BitManipulation.Endian)">
            <summary>
            Converts bytes into a double, discarding any excess data.
            </summary>
            <param name="data">the bytes to convert</param>
            <param name="endian">
            A setting indicating the endianness of the source data. The default is Endian.Little.
            </param>
            <returns>The converted ulong</returns>
        </member>
        <member name="T:Jcd.BitManipulation.SByteExtensions">
            <summary>
            Provides methods to perform easy to read bit manipulations on an <see cref="T:System.SByte" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.AreAllBitsSet(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on an <see cref="T:System.SByte" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.AreAnyBitsSet(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on an <see cref="T:System.SByte" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.AreNoBitsSet(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on an <see cref="T:System.SByte" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ToBooleanArray(System.SByte)">
            <summary>
            Convert an <see cref="T:System.SByte" /> into an array of bools
            </summary>
            <param name="bits">the <see cref="T:System.SByte" /> to convert</param>
            <returns>the array. Least Significant Bit at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ToByteArray(System.SByte)">
            <summary>
            Convert an <see cref="T:System.SByte" /> into an array of bytes
            </summary>
            <param name="data">the <see cref="T:System.SByte" /> to convert</param>
            <returns>an array containing the <see cref="T:System.SByte" />.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ClearBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ClearBit(System.SByte,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ClearBits(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ReadBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ReadBits(System.SByte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ReadBit(System.SByte,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.SetBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.SetBit(System.SByte,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.SetBits(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.StoreBits(System.SByte,System.SByte,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.StoreBits(System.SByte,System.SByte,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.StoreBit(System.SByte,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ToggleBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ToggleBit(System.SByte,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SByteExtensions.ToggleBits(System.SByte,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.SingleExtensions">
            <summary>
            Provides methods to perform easy to read bit and byte manipulations on a <see cref="T:System.Single" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.AreAllBitsSet(System.Single,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.Single" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.AreAnyBitsSet(System.Single,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on an <see cref="T:System.Single" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.AreNoBitsSet(System.Single,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on an <see cref="T:System.Single" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 8 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.BitwiseToUInt32(System.Single)">
            <summary>
            Converts a <see cref="T:System.Single" /> to the bit-wise identical <see cref="T:System.UInt32" />
            </summary>
            <param name="value">The value to convert</param>
            <returns>the <see cref="T:System.UInt32" /> representation of the underlying bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.BitwiseToInt32(System.Single)">
            <summary>
            Converts a <see cref="T:System.Single" /> to the bit-wise identical <see cref="T:System.Int32" />
            </summary>
            <param name="value">The value to convert</param>
            <returns>the <see cref="T:System.Int32" /> representation of the underlying bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ToBooleanArray(System.Single)">
            <summary>
            Convert a float into an array of bools
            </summary>
            <param name="bits">the long to convert</param>
            <returns>the array. LSB at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ToByteArray(System.Single,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a float into an array of bytes
            </summary>
            <param name="data">the long to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ClearBits(System.Single,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ClearBit(System.Single,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ClearBits(System.Single,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ReadBits(System.Single,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ReadBits(System.Single,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ReadBit(System.Single,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ReadBytes(System.Single,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ReadByte(System.Single,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.SetBits(System.Single,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.SetBit(System.Single,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.SetBits(System.Single,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.StoreBits(System.Single,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.StoreBits(System.Single,System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.StoreBit(System.Single,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.StoreBytes(System.Single,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.StoreBytes(System.Single,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.StoreByte(System.Single,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ToggleBits(System.Single,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ToggleBit(System.Single,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.SingleExtensions.ToggleBits(System.Single,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.UInt16Extensions">
            <summary>
            Provides methods to perform easy to read bit and byte manipulations on a <see cref="T:System.UInt16" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.AreAllBitsSet(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.UInt16" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.AreAnyBitsSet(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.UInt16" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.AreNoBitsSet(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.UInt16" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 16 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ToBooleanArray(System.UInt16)">
            <summary>
            Convert a <see cref="T:System.UInt16" /> into an array of bools
            </summary>
            <param name="bits">the bits of the <see cref="T:System.UInt16" /> to convert</param>
            <returns>the array. Least Significant Bit at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ToByteArray(System.UInt16,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a <see cref="T:System.UInt16" /> into an array of bytes
            </summary>
            <param name="data">the data of the <see cref="T:System.UInt16" /> to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ClearBit(System.UInt16,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ClearBits(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ReadBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ReadBits(System.UInt16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ReadBit(System.UInt16,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ReadBytes(System.UInt16,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ReadByte(System.UInt16,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.SetBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.SetBit(System.UInt16,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.StoreByte(System.UInt16,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness for indexing into the bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.StoreBytes(System.UInt16,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.StoreBytes(System.UInt16,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.SetBits(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.StoreBits(System.UInt16,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.StoreBits(System.UInt16,System.UInt16,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.StoreBit(System.UInt16,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ToggleBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ToggleBit(System.UInt16,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt16Extensions.ToggleBits(System.UInt16,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.UInt32Extensions">
            <summary>
            Provides methods to perform easy to read bit and byte manipulations on a <see cref="T:System.UInt32" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.AreAllBitsSet(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.UInt32" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.AreAnyBitsSet(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.UInt32" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.AreNoBitsSet(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.UInt32" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
            <remarks>
            NB: Only the lowest 32 bits of the bitmask will be used.
            </remarks>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.BitwiseToSingle(System.UInt32)">
            <summary>
            Converts a <see cref="T:System.UInt32" /> to the bit-wise identical <see cref="T:System.Single" />
            </summary>
            <param name="value">The value to convert</param>
            <returns>the <see cref="T:System.Single" /> representation of the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ToBooleanArray(System.UInt32)">
            <summary>
            Convert a uint into an array of bools
            </summary>
            <param name="bits">the <see cref="T:System.UInt32" /> to convert</param>
            <returns>the array. Least Significant Bit at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ToByteArray(System.UInt32,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a uint into an array of bytes
            </summary>
            <param name="data">the <see cref="T:System.UInt32" /> to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ClearBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ClearBit(System.UInt32,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ClearBits(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ReadBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ReadBits(System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ReadBit(System.UInt32,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ReadBytes(System.UInt32,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ReadByte(System.UInt32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.SetBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.SetBit(System.UInt32,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.SetBits(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.StoreBits(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.StoreBits(System.UInt32,System.UInt32,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.StoreBit(System.UInt32,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.StoreBytes(System.UInt32,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.StoreBytes(System.UInt32,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.StoreByte(System.UInt32,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness for indexing into the bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ToggleBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ToggleBit(System.UInt32,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt32Extensions.ToggleBits(System.UInt32,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="T:Jcd.BitManipulation.UInt64Extensions">
            <summary>
            Provides methods to perform easy to read bit and byte manipulations on a <see cref="T:System.UInt64" />
            </summary>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.AreAllBitsSet(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if all of the bits from the bitmask are set on a <see cref="T:System.UInt64" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.AreAnyBitsSet(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if any bits from the bitmask are set on a <see cref="T:System.UInt64" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if any of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.AreNoBitsSet(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Tests if none of the bits from the bitmask are set on a <see cref="T:System.UInt64" />.
            </summary>
            <param name="data">The data to inspect.</param>
            <param name="bitmask">the bits to test.</param>
            <returns>True if all of the bits from the bitmask were set.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.BitwiseToDouble(System.UInt64)">
            <summary>
            Converts a <see cref="T:System.UInt64" /> to the bit-wise identical <see cref="T:System.Double" />
            </summary>
            <param name="value">The value to convert</param>
            <returns>the <see cref="T:System.Double" /> representation of the bits</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ToBooleanArray(System.UInt64)">
            <summary>
            Convert a <see cref="T:System.UInt64" /> into an array of bools
            </summary>
            <param name="bits">the ulong to convert</param>
            <returns>the array. Least Significant Bit at index 0</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ToByteArray(System.UInt64,Jcd.BitManipulation.Endian)">
            <summary>
            Convert a <see cref="T:System.UInt64" /> into an array of bytes
            </summary>
            <param name="data">the <see cref="T:System.UInt64" /> to convert</param>
            <param name="endian">The order in which to store the bytes</param>
            <returns>The value as an array in the requested byte order</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ClearBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ClearBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of where to begin clearing bits.</param>
            <param name="size">The number of bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ClearBit(System.UInt64,System.Int32)">
            <summary>
            Sets bit to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ClearBits(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all bits from a provided mask to "off" and returns the modified value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">the bit mask of the bits to clear.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ReadBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            For a given value return the specified bits from within it, right shifted pos bits.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="size">The total number of bits to extract</param>
            <returns>The numeric value stored at that bit location</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ReadBits(System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Extract a subset of bits specified by a bitmask and right align the bits by the offset.
            </summary>
            <param name="value">the source of bits to read</param>
            <param name="offset">the bit offset to read from</param>
            <param name="mask">
            the bitmask of which bits to read.
            Zeroed bits in the mask will always extract 0 from the source.
            </param>
            <returns>The right shifted value extracted from the value</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ReadBit(System.UInt64,System.Int32)">
            <summary>
            Read a single bit from the specified offset.
            </summary>
            <param name="value">the bits to read from</param>
            <param name="offset">the offset of the bit to read</param>
            <returns>the bit (a bool) at the specified offset </returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ReadBytes(System.UInt64,System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Reads a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The byte size of the value.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>A little endian byte array of the value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ReadByte(System.UInt64,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Read a single byte from the value at the specified byte offset.
            </summary>
            <param name="value">The value to be read.</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The specified byte.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.SetBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The number of bits to set on.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.SetBit(System.UInt64,System.Int32)">
            <summary>
            Sets specified bit to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bit to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.SetBits(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Sets all specified bits to "on"
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.StoreBits(System.UInt64,System.UInt64,System.Int32,System.Int32)">
            <summary>
            Stores a value at the specified bit location within the variable.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="source">The value to be stored at the bit location.</param>
            <param name="offset">The bit location to store the value.</param>
            <param name="size">The bit size of the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.StoreBits(System.UInt64,System.UInt64,System.Int32,Jcd.BitManipulation.BitMask)">
            <summary>
            Store a masked set of bits from a value to an offset in the destination
            The mask must apply to the destination bits.
            </summary>
            <param name="value">the destination for the stored bits</param>
            <param name="source">the source of the bits to store</param>
            <param name="offset">the destination offset of where to store the bits</param>
            <param name="mask">the mask of which bits to store</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.StoreBit(System.UInt64,System.Boolean,System.Int32)">
            <summary>
            Store a single bit at the specified offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bit">The bit value to set</param>
            <param name="offset">the offset of the bit to write</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.StoreBytes(System.UInt64,System.ReadOnlySpan{System.Byte},System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.StoreBytes(System.UInt64,System.Byte[],System.Int32,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Stores a set of bytes starting at the specified byte location within the value.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="bytes">The value to be stored at the byte location.</param>
            <param name="offset">The byte location to store the value.</param>
            <param name="size">The number of bytes from the source, to store. -1 means all bytes.</param>
            <param name="endian">The endianness of the byte indexing within the value.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.StoreByte(System.UInt64,System.Byte,System.Int32,Jcd.BitManipulation.Endian)">
            <summary>
            Store a single byte to the value at the specified byte offset.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="byte">The byte value to set</param>
            <param name="offset">the offset of the byte to write</param>
            <param name="endian">The endianness for indexing into the bytes.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ToggleBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Toggles bits and size.
            The default values result in toggling all bits.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The offset of the bits to toggle.</param>
            <param name="size">The number of bits to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ToggleBit(System.UInt64,System.Int32)">
            <summary>
            Toggles a bit.
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="offset">The bit location to toggle.</param>
            <returns>The modified value.</returns>
        </member>
        <member name="M:Jcd.BitManipulation.UInt64Extensions.ToggleBits(System.UInt64,Jcd.BitManipulation.BitMask)">
            <summary>
            Toggle all the bits according to the provided mask
            </summary>
            <param name="value">The value to be modified.</param>
            <param name="mask">bits to set.</param>
            <returns>The modified value.</returns>
        </member>
    </members>
</doc>
